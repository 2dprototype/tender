{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tender Tender is a general-purpose programming language specially designed for image processing, 2D graphics, scripting, and more! Overview Tender compiles into bytecode and executes on a stack-based virtual machine (VM) written in native Golang. Features Simple and highly readable syntax Compiles to bytecode Supports rich built-in functions Includes an extensive standard library Optimized for 2D graphics Supported Standard Library math : Mathematical constants and functions os : Platform-independent interface to OS functionality strings : String conversion, manipulation, and regular expressions times : Time-related functions rand : Random number generation fmt : Formatting functions json : JSON handling functions base64 : Base64 encoding and decoding hex : Hexadecimal encoding and decoding colors : Functions to print colored text to the terminal gzip : Gzip compression and decompression zip : ZIP archive manipulation tar : TAR archive creation and reading bufio : Buffered I/O functions crypto : Cryptographic functions path : File path manipulation image : Image manipulation canvas : Drawing functions for canvases dll : Dynamic link library interactions io : Input and output functions audio : Audio processing net : Networking functions http : HTTP client and server utilities websocket : WebSocket communication utilities gob : Gob Encoding/Ddecoding csv : CSV Encoding/Ddecoding Quick Start Install Tender on your machine. Copy the sample code below: // Basic example str1 := \"hello\" str2 := \"world\" println(str1 + \" \" + str2) // Canvas drawing example (similar to JS Canvas) import \"canvas\" var ctx = canvas.new_context(100, 100) ctx.hex(\"#0f0\") // Set color to green ctx.dash(4, 2) // Define dashed stroke ctx.rect(25, 25, 50, 50) // Draw a rectangle ctx.stroke() ctx.save_png(\"out.png\") // Save output as PNG Save your code as hello.td (use the .td extension). Run your script using the following command: tender hello.td Installation Using Go Install the latest version of Go. Run the following command to install: go install github.com/2dprototype/tender/cmd/tender@latest Manual Installation (Windows) Precompiled binaries are available. Download them from the release tags. Documentation Runtime Types Built-in Functions Operators Standard Library Examples Explore various examples demonstrating Tender\u2019s features in the examples directory. Dependencies Tender uses the following dependencies: go-mp3 gorilla/websocket ebitengine/oto/v3 exp/shiny fogleman/gg Syntax Highlighting Syntax highlighting is currently available only for Notepad++ . Download the configuration file here . License Tender is distributed under the MIT License , with additional licenses provided for third-party dependencies. See LICENSE_GOLANG and LICENSE_TENGO for more information. Acknowledgments Tender is written in Go, based on Tengo. We extend our gratitude to the contributors of Tengo for their valuable work.","title":"Tender"},{"location":"#tender","text":"Tender is a general-purpose programming language specially designed for image processing, 2D graphics, scripting, and more!","title":"Tender"},{"location":"#overview","text":"Tender compiles into bytecode and executes on a stack-based virtual machine (VM) written in native Golang.","title":"Overview"},{"location":"#features","text":"Simple and highly readable syntax Compiles to bytecode Supports rich built-in functions Includes an extensive standard library Optimized for 2D graphics","title":"Features"},{"location":"#supported-standard-library","text":"math : Mathematical constants and functions os : Platform-independent interface to OS functionality strings : String conversion, manipulation, and regular expressions times : Time-related functions rand : Random number generation fmt : Formatting functions json : JSON handling functions base64 : Base64 encoding and decoding hex : Hexadecimal encoding and decoding colors : Functions to print colored text to the terminal gzip : Gzip compression and decompression zip : ZIP archive manipulation tar : TAR archive creation and reading bufio : Buffered I/O functions crypto : Cryptographic functions path : File path manipulation image : Image manipulation canvas : Drawing functions for canvases dll : Dynamic link library interactions io : Input and output functions audio : Audio processing net : Networking functions http : HTTP client and server utilities websocket : WebSocket communication utilities gob : Gob Encoding/Ddecoding csv : CSV Encoding/Ddecoding","title":"Supported Standard Library"},{"location":"#quick-start","text":"Install Tender on your machine. Copy the sample code below: // Basic example str1 := \"hello\" str2 := \"world\" println(str1 + \" \" + str2) // Canvas drawing example (similar to JS Canvas) import \"canvas\" var ctx = canvas.new_context(100, 100) ctx.hex(\"#0f0\") // Set color to green ctx.dash(4, 2) // Define dashed stroke ctx.rect(25, 25, 50, 50) // Draw a rectangle ctx.stroke() ctx.save_png(\"out.png\") // Save output as PNG Save your code as hello.td (use the .td extension). Run your script using the following command: tender hello.td","title":"Quick Start"},{"location":"#installation","text":"","title":"Installation"},{"location":"#using-go","text":"Install the latest version of Go. Run the following command to install: go install github.com/2dprototype/tender/cmd/tender@latest","title":"Using Go"},{"location":"#manual-installation-windows","text":"Precompiled binaries are available. Download them from the release tags.","title":"Manual Installation (Windows)"},{"location":"#documentation","text":"Runtime Types Built-in Functions Operators Standard Library","title":"Documentation"},{"location":"#examples","text":"Explore various examples demonstrating Tender\u2019s features in the examples directory.","title":"Examples"},{"location":"#dependencies","text":"Tender uses the following dependencies: go-mp3 gorilla/websocket ebitengine/oto/v3 exp/shiny fogleman/gg","title":"Dependencies"},{"location":"#syntax-highlighting","text":"Syntax highlighting is currently available only for Notepad++ . Download the configuration file here .","title":"Syntax Highlighting"},{"location":"#license","text":"Tender is distributed under the MIT License , with additional licenses provided for third-party dependencies. See LICENSE_GOLANG and LICENSE_TENGO for more information.","title":"License"},{"location":"#acknowledgments","text":"Tender is written in Go, based on Tengo. We extend our gratitude to the contributors of Tengo for their valuable work.","title":"Acknowledgments"},{"location":"pages/builtins/","text":"Builtin Functions Documentation debug Prints debugging information about the provided arguments. debug(\"Hello, World!\") // Output: Hello, World! sysout Writes the provided arguments to the system standard output. sysout \"Hello, World!\", \"\\n\" // Output: Hello, World! print Prints the provided arguments without adding a new line. print(\"Hello, World!\") // Output: Hello, World! printf Formats and prints the provided arguments according to the format specifier. printf(\"Hello, %s!\", \"World\") // Output: Hello, World! println Prints the provided arguments followed by a new line. println(\"Hello, World!\") // Output: Hello, World! reverse Reverses the provided array or string. arr := [1, 2, 3] revArr := reverse(arr) // revArr == [3, 2, 1] str := \"Hello\" revStr := reverse(str) // revStr == \"olleH\" includes Checks if the array or string includes the provided element. arr := [1, 2, 3] hasTwo := includes(arr, 2) // hasTwo == true str := \"Hello\" hasE := includes(str, 'e') // hasE == false indexof Returns the index of the first occurrence of the provided element in the array or string. arr := [1, 2, 3] index := indexof(arr, 2) // index == 1 str := \"Hello\" index := indexof(str, 'l') // index == 2 lastindexof Returns the index of the last occurrence of the provided element in the array or string. arr := [1, 2, 3, 2] index := lastindexof(arr, 2) // index == 3 str := \"Hello\" index := lastindexof(str, 'l') // index == 3 cap Returns the capacity of the array. arr := [1, 2, 3] capacity := cap(arr) // capacity == 3 len Returns the number of elements if the given variable is array, string, map, or module map. v := [1, 2, 3] l := len(v) // l == 3 copy Creates a copy of the given variable. copy function calls Object.Copy interface method, which is expected to return a deep-copy of the value it holds. v1 := [1, 2, 3] v2 := v1 v3 := copy(v1) v1[1] = 0 print(v2[1]) // \"0\"; 'v1' and 'v2' referencing the same array print(v3[1]) // \"2\"; 'v3' not affected by 'v1' append Appends object(s) to an array (first argument) and returns a new array object. (Like Go's append builtin.) Currently, this function takes array type only. v := [1] v = append(v, 2, 3) // v == [1, 2, 3] delete Deletes the element with the specified key from the map type. First argument must be a map type and second argument must be a string type. (Like Go's delete builtin except keys are always string). delete returns null value if successful and it mutates given map. v := {key: \"value\"} delete(v, \"key\") // v == {} splice Deletes and/or changes the contents of a given array and returns deleted items as a new array. splice is similar to JS Array.prototype.splice() except splice is a builtin function and first argument must an array. First argument must be an array, and if second and third arguments are provided those must be integers otherwise runtime error is returned. Usage: deleted_items := splice(array[, start[, delete_count[, item1[, item2[, ...]]]]) v := [1, 2, 3] items := splice(v, 0) // items == [1, 2, 3], v == [] sort Sorts the provided array. arr := [3, 1, 2] sortedArr := sort(arr) // sortedArr == [1, 2, 3] range Returns a new array of int with elements from start to end . v := range(2, 5) // v == [2, 3, 4] format Returns a formatted string. The first argument must be a String object. See this for more details on formatting. a := [1, 2, 3] s := format(\"Foo: %v\", a) // s == \"Foo: [1, 2, 3]\" typeof Returns the type name of an object. typeof(1) // int typeof(\"str\") // string typeof([1, 2, 3]) // array rune Converts the provided rune to a integer. r := rune('a') // r == 97 string Tries to convert an object to string object. See Runtime Types for more details on type conversion. x := string(123) // x == \"123\" int Tries to convert an object to int object. See this for more details on type conversion. v := int(\"123\") // v == 123 Optionally it can take the second argument, which will be returned if the first argument cannot be converted to int. Note that the second argument does not have to be int. v = int(null, 10) // v == 10 v = int(null, false) // v == false bool Tries to convert an object to bool object. See this for more details on type conversion. v := bool(1) // v == true float Tries to convert an object to float object. See this for more details on type conversion. v := float(\"19.84\") // v == 19.84 Optionally it can take the second argument, which will be returned if the first argument cannot be converted to float. Note that the second argument does not have to be float. v = float(null, 19.84) // v == 19.84 v = float(null, false) // v == false char Tries to convert an object to char object. See this for more details on type conversion. v := char(89) // v == 'Y' Optionally it can take the second argument, which will be returned if the first argument cannot be converted to float. Note that the second argument does not have to be float. v = char(null, 'X') // v == 'X' v = char(null, false) // v == false bytes Tries to convert an object to bytes object. See this for more details on type conversion. v := bytes(\"foo\") // v == [102 111 111] If you pass an int to bytes() function, it will create a new byte object with the given size. v := bytes(100) time Tries to convert an object to time value. v := time(1257894000) // 2009-11-10 23:00:00 +0000 UTC is_cycle Returns true if the object's type is cycle. Or it returns false . is_int Returns true if the object's type is int. Or it returns false . is_float Returns true if the object's type is float. Or it returns false . is_string Returns true if the object's type is string. Or it returns false . is_bool Returns true if the object's type is bool. Or it returns false . is_char Returns true if the object's type is char. Or it returns false . is_bytes Returns true if the object's type is bytes. Or it returns false . is_array Returns true if the object's type is array. Or it returns false . is_immutable_array Returns true if the object's type is immutable array. Or it returns false . is_map Returns true if the object's type is map. Or it returns false . is_immutable_map immutable_map Returns true if the object's type is immutable map. Or it returns false . is_time Returns true if the object's type is time. Or it returns false . is_function Returns true if the object's type is function. Or it returns false . is_null Returns true if the object's type is null. Or it returns false . is_error Returns true if the object's type is error. Or it returns false . is_iterable Returns true if the object's type is iterable. Or it returns false .","title":"Builtin Functions Documentation"},{"location":"pages/builtins/#builtin-functions-documentation","text":"","title":"Builtin Functions Documentation"},{"location":"pages/builtins/#debug","text":"Prints debugging information about the provided arguments. debug(\"Hello, World!\") // Output: Hello, World!","title":"debug"},{"location":"pages/builtins/#sysout","text":"Writes the provided arguments to the system standard output. sysout \"Hello, World!\", \"\\n\" // Output: Hello, World!","title":"sysout"},{"location":"pages/builtins/#print","text":"Prints the provided arguments without adding a new line. print(\"Hello, World!\") // Output: Hello, World!","title":"print"},{"location":"pages/builtins/#printf","text":"Formats and prints the provided arguments according to the format specifier. printf(\"Hello, %s!\", \"World\") // Output: Hello, World!","title":"printf"},{"location":"pages/builtins/#println","text":"Prints the provided arguments followed by a new line. println(\"Hello, World!\") // Output: Hello, World!","title":"println"},{"location":"pages/builtins/#reverse","text":"Reverses the provided array or string. arr := [1, 2, 3] revArr := reverse(arr) // revArr == [3, 2, 1] str := \"Hello\" revStr := reverse(str) // revStr == \"olleH\"","title":"reverse"},{"location":"pages/builtins/#includes","text":"Checks if the array or string includes the provided element. arr := [1, 2, 3] hasTwo := includes(arr, 2) // hasTwo == true str := \"Hello\" hasE := includes(str, 'e') // hasE == false","title":"includes"},{"location":"pages/builtins/#indexof","text":"Returns the index of the first occurrence of the provided element in the array or string. arr := [1, 2, 3] index := indexof(arr, 2) // index == 1 str := \"Hello\" index := indexof(str, 'l') // index == 2","title":"indexof"},{"location":"pages/builtins/#lastindexof","text":"Returns the index of the last occurrence of the provided element in the array or string. arr := [1, 2, 3, 2] index := lastindexof(arr, 2) // index == 3 str := \"Hello\" index := lastindexof(str, 'l') // index == 3","title":"lastindexof"},{"location":"pages/builtins/#cap","text":"Returns the capacity of the array. arr := [1, 2, 3] capacity := cap(arr) // capacity == 3","title":"cap"},{"location":"pages/builtins/#len","text":"Returns the number of elements if the given variable is array, string, map, or module map. v := [1, 2, 3] l := len(v) // l == 3","title":"len"},{"location":"pages/builtins/#copy","text":"Creates a copy of the given variable. copy function calls Object.Copy interface method, which is expected to return a deep-copy of the value it holds. v1 := [1, 2, 3] v2 := v1 v3 := copy(v1) v1[1] = 0 print(v2[1]) // \"0\"; 'v1' and 'v2' referencing the same array print(v3[1]) // \"2\"; 'v3' not affected by 'v1'","title":"copy"},{"location":"pages/builtins/#append","text":"Appends object(s) to an array (first argument) and returns a new array object. (Like Go's append builtin.) Currently, this function takes array type only. v := [1] v = append(v, 2, 3) // v == [1, 2, 3]","title":"append"},{"location":"pages/builtins/#delete","text":"Deletes the element with the specified key from the map type. First argument must be a map type and second argument must be a string type. (Like Go's delete builtin except keys are always string). delete returns null value if successful and it mutates given map. v := {key: \"value\"} delete(v, \"key\") // v == {}","title":"delete"},{"location":"pages/builtins/#splice","text":"Deletes and/or changes the contents of a given array and returns deleted items as a new array. splice is similar to JS Array.prototype.splice() except splice is a builtin function and first argument must an array. First argument must be an array, and if second and third arguments are provided those must be integers otherwise runtime error is returned. Usage: deleted_items := splice(array[, start[, delete_count[, item1[, item2[, ...]]]]) v := [1, 2, 3] items := splice(v, 0) // items == [1, 2, 3], v == []","title":"splice"},{"location":"pages/builtins/#sort","text":"Sorts the provided array. arr := [3, 1, 2] sortedArr := sort(arr) // sortedArr == [1, 2, 3]","title":"sort"},{"location":"pages/builtins/#range","text":"Returns a new array of int with elements from start to end . v := range(2, 5) // v == [2, 3, 4]","title":"range"},{"location":"pages/builtins/#format","text":"Returns a formatted string. The first argument must be a String object. See this for more details on formatting. a := [1, 2, 3] s := format(\"Foo: %v\", a) // s == \"Foo: [1, 2, 3]\"","title":"format"},{"location":"pages/builtins/#typeof","text":"Returns the type name of an object. typeof(1) // int typeof(\"str\") // string typeof([1, 2, 3]) // array","title":"typeof"},{"location":"pages/builtins/#rune","text":"Converts the provided rune to a integer. r := rune('a') // r == 97","title":"rune"},{"location":"pages/builtins/#string","text":"Tries to convert an object to string object. See Runtime Types for more details on type conversion. x := string(123) // x == \"123\"","title":"string"},{"location":"pages/builtins/#int","text":"Tries to convert an object to int object. See this for more details on type conversion. v := int(\"123\") // v == 123 Optionally it can take the second argument, which will be returned if the first argument cannot be converted to int. Note that the second argument does not have to be int. v = int(null, 10) // v == 10 v = int(null, false) // v == false","title":"int"},{"location":"pages/builtins/#bool","text":"Tries to convert an object to bool object. See this for more details on type conversion. v := bool(1) // v == true","title":"bool"},{"location":"pages/builtins/#float","text":"Tries to convert an object to float object. See this for more details on type conversion. v := float(\"19.84\") // v == 19.84 Optionally it can take the second argument, which will be returned if the first argument cannot be converted to float. Note that the second argument does not have to be float. v = float(null, 19.84) // v == 19.84 v = float(null, false) // v == false","title":"float"},{"location":"pages/builtins/#char","text":"Tries to convert an object to char object. See this for more details on type conversion. v := char(89) // v == 'Y' Optionally it can take the second argument, which will be returned if the first argument cannot be converted to float. Note that the second argument does not have to be float. v = char(null, 'X') // v == 'X' v = char(null, false) // v == false","title":"char"},{"location":"pages/builtins/#bytes","text":"Tries to convert an object to bytes object. See this for more details on type conversion. v := bytes(\"foo\") // v == [102 111 111] If you pass an int to bytes() function, it will create a new byte object with the given size. v := bytes(100)","title":"bytes"},{"location":"pages/builtins/#time","text":"Tries to convert an object to time value. v := time(1257894000) // 2009-11-10 23:00:00 +0000 UTC","title":"time"},{"location":"pages/builtins/#is_cycle","text":"Returns true if the object's type is cycle. Or it returns false .","title":"is_cycle"},{"location":"pages/builtins/#is_int","text":"Returns true if the object's type is int. Or it returns false .","title":"is_int"},{"location":"pages/builtins/#is_float","text":"Returns true if the object's type is float. Or it returns false .","title":"is_float"},{"location":"pages/builtins/#is_string","text":"Returns true if the object's type is string. Or it returns false .","title":"is_string"},{"location":"pages/builtins/#is_bool","text":"Returns true if the object's type is bool. Or it returns false .","title":"is_bool"},{"location":"pages/builtins/#is_char","text":"Returns true if the object's type is char. Or it returns false .","title":"is_char"},{"location":"pages/builtins/#is_bytes","text":"Returns true if the object's type is bytes. Or it returns false .","title":"is_bytes"},{"location":"pages/builtins/#is_array","text":"Returns true if the object's type is array. Or it returns false .","title":"is_array"},{"location":"pages/builtins/#is_immutable_array","text":"Returns true if the object's type is immutable array. Or it returns false .","title":"is_immutable_array"},{"location":"pages/builtins/#is_map","text":"Returns true if the object's type is map. Or it returns false .","title":"is_map"},{"location":"pages/builtins/#is_immutable_map","text":"immutable_map Returns true if the object's type is immutable map. Or it returns false .","title":"is_immutable_map"},{"location":"pages/builtins/#is_time","text":"Returns true if the object's type is time. Or it returns false .","title":"is_time"},{"location":"pages/builtins/#is_function","text":"Returns true if the object's type is function. Or it returns false .","title":"is_function"},{"location":"pages/builtins/#is_null","text":"Returns true if the object's type is null. Or it returns false .","title":"is_null"},{"location":"pages/builtins/#is_error","text":"Returns true if the object's type is error. Or it returns false .","title":"is_error"},{"location":"pages/builtins/#is_iterable","text":"Returns true if the object's type is iterable. Or it returns false .","title":"is_iterable"},{"location":"pages/formatting/","text":"Formatting The format 'verbs' are derived from Go's but are simpler. The verbs General %v the value in a default format %T a Go-syntax representation of the type of the value %% a literal percent sign; consumes no value Boolean %t the word true or false Integer %b base 2 %c the character represented by the corresponding Unicode code point %d base 10 %o base 8 %O base 8 with 0o prefix %q a single-quoted character literal safely escaped with Go syntax. %x base 16, with lower-case letters for a-f %X base 16, with upper-case letters for A-F %U Unicode format: U+1234; same as \"U+%04X\" Float %b decimalless scientific notation with exponent a power of two, in the manner of Go's strconv.FormatFloat with the 'b' format, e.g. -123456p-78 %e scientific notation, e.g. -1.234456e+78 %E scientific notation, e.g. -1.234456E+78 %f decimal point but no exponent, e.g. 123.456 %F synonym for %f %g %e for large exponents, %f otherwise. Precision is discussed below. %G %E for large exponents, %F otherwise %x hexadecimal notation (with decimal power of two exponent), e.g. -0x1.23abcp+20 %X upper-case hexadecimal notation, e.g. -0X1.23ABCP+20 String and Bytes %s the uninterpreted bytes of the string or slice %q a double-quoted string safely escaped with Go syntax %x base 16, lower-case, two characters per byte %X base 16, upper-case, two characters per byte Default format for %v Bool: %t Int: %d Float: %g String: %s Compound Objects Array: [elem0 elem1 ...] Maps: {key1:value1 key2:value2 ...} Width and Precision Width is specified by an optional decimal number immediately preceding the verb. If absent, the width is whatever is necessary to represent the value. Precision is specified after the (optional) width by a period followed by a decimal number. If no period is present, a default precision is used. A period with no following number specifies a precision of zero. Examples: %f default width, default precision %9f width 9, default precision %.2f default width, precision 2 %9.2f width 9, precision 2 %9.f width 9, precision 0 Width and precision are measured in units of Unicode code points. Either or both of the flags may be replaced with the character '*', causing their values to be obtained from the next operand (preceding the one to format), which must be of type Int. For most values, width is the minimum number of runes to output, padding the formatted form with spaces if necessary. For Strings and Bytes, however, precision limits the length of the input to be formatted (not the size of the output), truncating if necessary. Normally it is measured in units of Unicode code points, but for these types when formatted with the %x or %X format it is measured in bytes. For floating-point values, width sets the minimum width of the field and precision sets the number of places after the decimal, if appropriate, except that for %g/%G precision sets the maximum number of significant digits (trailing zeros are removed). For example, given 12.345 the format %6.3f prints 12.345 while %.3g prints 12.3. The default precision for %e, %f and %#g is 6; for %g it is the smallest number of digits necessary to identify the value uniquely. For complex numbers, the width and precision apply to the two components independently and the result is parenthesized, so %f applied to 1.2+3.4i produces (1.200000+3.400000i). Other flags + always print a sign for numeric values; guarantee ASCII-only output for %q (%+q) - pad with spaces on the right rather than the left (left-justify the field) # alternate format: add leading 0b for binary (%#b), 0 for octal (%#o), 0x or 0X for hex (%#x or %#X); for %q, print a raw (backquoted) string if strconv.CanBackquote returns true; always print a decimal point for %e, %E, %f, %F, %g and %G; do not remove trailing zeros for %g and %G; write e.g. U+0078 'x' if the character is printable for %U (%#U). ' ' (space) leave a space for elided sign in numbers (% d); put spaces between bytes printing strings or slices in hex (% x, % X) 0 pad with leading zeros rather than spaces; for numbers, this moves the padding after the sign Flags are ignored by verbs that do not expect them. For example there is no alternate decimal format, so %#d and %d behave identically.","title":"Formatting"},{"location":"pages/formatting/#formatting","text":"The format 'verbs' are derived from Go's but are simpler.","title":"Formatting"},{"location":"pages/formatting/#the-verbs","text":"","title":"The verbs"},{"location":"pages/formatting/#general","text":"%v the value in a default format %T a Go-syntax representation of the type of the value %% a literal percent sign; consumes no value","title":"General"},{"location":"pages/formatting/#boolean","text":"%t the word true or false","title":"Boolean"},{"location":"pages/formatting/#integer","text":"%b base 2 %c the character represented by the corresponding Unicode code point %d base 10 %o base 8 %O base 8 with 0o prefix %q a single-quoted character literal safely escaped with Go syntax. %x base 16, with lower-case letters for a-f %X base 16, with upper-case letters for A-F %U Unicode format: U+1234; same as \"U+%04X\"","title":"Integer"},{"location":"pages/formatting/#float","text":"%b decimalless scientific notation with exponent a power of two, in the manner of Go's strconv.FormatFloat with the 'b' format, e.g. -123456p-78 %e scientific notation, e.g. -1.234456e+78 %E scientific notation, e.g. -1.234456E+78 %f decimal point but no exponent, e.g. 123.456 %F synonym for %f %g %e for large exponents, %f otherwise. Precision is discussed below. %G %E for large exponents, %F otherwise %x hexadecimal notation (with decimal power of two exponent), e.g. -0x1.23abcp+20 %X upper-case hexadecimal notation, e.g. -0X1.23ABCP+20","title":"Float"},{"location":"pages/formatting/#string-and-bytes","text":"%s the uninterpreted bytes of the string or slice %q a double-quoted string safely escaped with Go syntax %x base 16, lower-case, two characters per byte %X base 16, upper-case, two characters per byte","title":"String and Bytes"},{"location":"pages/formatting/#default-format-for-v","text":"Bool: %t Int: %d Float: %g String: %s","title":"Default format for %v"},{"location":"pages/formatting/#compound-objects","text":"Array: [elem0 elem1 ...] Maps: {key1:value1 key2:value2 ...}","title":"Compound Objects"},{"location":"pages/formatting/#width-and-precision","text":"Width is specified by an optional decimal number immediately preceding the verb. If absent, the width is whatever is necessary to represent the value. Precision is specified after the (optional) width by a period followed by a decimal number. If no period is present, a default precision is used. A period with no following number specifies a precision of zero. Examples: %f default width, default precision %9f width 9, default precision %.2f default width, precision 2 %9.2f width 9, precision 2 %9.f width 9, precision 0 Width and precision are measured in units of Unicode code points. Either or both of the flags may be replaced with the character '*', causing their values to be obtained from the next operand (preceding the one to format), which must be of type Int. For most values, width is the minimum number of runes to output, padding the formatted form with spaces if necessary. For Strings and Bytes, however, precision limits the length of the input to be formatted (not the size of the output), truncating if necessary. Normally it is measured in units of Unicode code points, but for these types when formatted with the %x or %X format it is measured in bytes. For floating-point values, width sets the minimum width of the field and precision sets the number of places after the decimal, if appropriate, except that for %g/%G precision sets the maximum number of significant digits (trailing zeros are removed). For example, given 12.345 the format %6.3f prints 12.345 while %.3g prints 12.3. The default precision for %e, %f and %#g is 6; for %g it is the smallest number of digits necessary to identify the value uniquely. For complex numbers, the width and precision apply to the two components independently and the result is parenthesized, so %f applied to 1.2+3.4i produces (1.200000+3.400000i).","title":"Width and Precision"},{"location":"pages/formatting/#other-flags","text":"+ always print a sign for numeric values; guarantee ASCII-only output for %q (%+q) - pad with spaces on the right rather than the left (left-justify the field) # alternate format: add leading 0b for binary (%#b), 0 for octal (%#o), 0x or 0X for hex (%#x or %#X); for %q, print a raw (backquoted) string if strconv.CanBackquote returns true; always print a decimal point for %e, %E, %f, %F, %g and %G; do not remove trailing zeros for %g and %G; write e.g. U+0078 'x' if the character is printable for %U (%#U). ' ' (space) leave a space for elided sign in numbers (% d); put spaces between bytes printing strings or slices in hex (% x, % X) 0 pad with leading zeros rather than spaces; for numbers, this moves the padding after the sign Flags are ignored by verbs that do not expect them. For example there is no alternate decimal format, so %#d and %d behave identically.","title":"Other flags"},{"location":"pages/operators/","text":"Operators Int Equality (int) == (int) = (bool) : equality (int) != (int) = (bool) : inequality Arithmetic Operators (int) + (int) = (int) : sum (int) - (int) = (int) : difference (int) * (int) = (int) : product (int) / (int) = (int) : quotient (int) % (int) = (int) : remainder (int) + (float) = (float) : sum (int) - (float) = (float) : difference (int) * (float) = (float) : product (int) / (float) = (float) : quotient (int) + (char) = (char) : sum (int) - (char) = (char) : difference Bitwise Operators (int) & (int) = (int) : bitwise AND (int) | (int) = (int) : bitwise OR (int) ^ (int) = (int) : bitwise XOR (int) &^ (int) = (int) : bitclear (AND NOT) (int) << (int) = (int) : left shift (int) >> (int) = (int) : right shift Comparison Operators (int) < (int) = (bool) : less than (int) > (int) = (bool) : greater than (int) <= (int) = (bool) : less than or equal to (int) >= (int) = (bool) : greater than or equal to (int) < (float) = (bool) : less than (int) > (float) = (bool) : greater than (int) <= (float) = (bool) : less than or equal to (int) >= (float) = (bool) : greater than or equal to (int) < (char) = (bool) : less than (int) > (char) = (bool) : greater than (int) <= (char) = (bool) : less than or equal to (int) >= (char) = (bool) : greater than or equal to Float Equality (float) == (float) = (bool) : equality (float) != (float) = (bool) : inequality Arithmetic Operators (float) + (float) = (float) : sum (float) - (float) = (float) : difference (float) * (float) = (float) : product (float) / (float) = (float) : quotient (float) + (int) = (int) : sum (float) - (int) = (int) : difference (float) * (int) = (int) : product (float) / (int) = (int) : quotient Comparison Operators (float) < (float) = (bool) : less than (float) > (float) = (bool) : greater than (float) <= (float) = (bool) : less than or equal to (float) >= (float) = (bool) : greater than or equal to (float) < (int) = (bool) : less than (float) > (int) = (bool) : greater than (float) <= (int) = (bool) : less than or equal to (float) >= (int) = (bool) : greater than or equal to String Equality (string) == (string) = (bool) : equality (string) != (string) = (bool) : inequality Concatenation (string) + (string) = (string) : concatenation (string) + (other types) = (string) : concatenation (after string-converted) Comparison Operators (string) < (string) = (bool) : less than (string) > (string) = (bool) : greater than (string) <= (string) = (bool) : less than or equal to (string) >= (string) = (bool) : greater than or equal to Char Equality (char) == (char) = (bool) : equality (char) != (char) = (bool) : inequality Arithmetic Operators (char) + (char) = (char) : sum (char) - (char) = (char) : difference (char) + (int) = (char) : sum (char) - (int) = (char) : difference Comparison Operators (char) < (char) = (bool) : less than (char) > (char) = (bool) : greater than (char) <= (char) = (bool) : less than or equal to (char) >= (char) = (bool) : greater than or equal to (char) < (int) = (bool) : less than (char) > (int) = (bool) : greater than (char) <= (int) = (bool) : less than or equal to (char) >= (int) = (bool) : greater than or equal to Bool Equality (bool) == (bool) = (bool) : equality (bool) != (bool) = (bool) : inequality Bytes Equality Test whether two byte array contain the same data. Uses bytes.Compare internally. (bytes) == (bytes) = (bool) : equality (bytes) != (bytes) = (bool) : inequality Time Equality Tests whether two times represent the same time instance. Uses Time.Equal internally. (time) == (time) = (bool) : equality (time) != (time) = (bool) : inequality Arithmetic Operators (time) - (time) = (int) : difference in nanoseconds (duration) (time) + (int) = (time) : time + duration (nanoseconds) (time) - (int) = (time) : time - duration (nanoseconds) Comparison Operators (time) < (time) = (bool) : less than (time) > (time) = (bool) : greater than (time) <= (time) = (bool) : less than or equal to (time) >= (time) = (bool) : greater than or equal to Array and ImmutableArray Equality Tests whether two (immutable) arrays contain the same objects. (array) == (array) = (bool) : equality (array) != (array) = (bool) : inequality (array) == (immutable-array) = (bool) : equality (array) != (immutable-array) = (bool) : inequality (immutable-array) == (immutable-array) = (bool) : equality (immutable-array) != (immutable-array) = (bool) : inequality (immutable-array) == (array) = (bool) : equality (immutable-array) != (array) = (bool) : inequality Concatenation (array) + (array) : return a concatenated array Map and ImmutableMap Equality Tests whether two (immutable) maps contain the same key-objects. (map) == (map) = (bool) : equality (map) != (map) = (bool) : inequality (map) == (immutable-map) = (bool) : equality (map) != (immutable-map) = (bool) : inequality (immutable-map) == (immutable-map) = (bool) : equality (immutable-map) != (immutable-map) = (bool) : inequality (immutable-map) == (map) = (bool) : equality (immutable-map) != (map) = (bool) : inequality","title":"Operators"},{"location":"pages/operators/#operators","text":"","title":"Operators"},{"location":"pages/operators/#int","text":"","title":"Int"},{"location":"pages/operators/#equality","text":"(int) == (int) = (bool) : equality (int) != (int) = (bool) : inequality","title":"Equality"},{"location":"pages/operators/#arithmetic-operators","text":"(int) + (int) = (int) : sum (int) - (int) = (int) : difference (int) * (int) = (int) : product (int) / (int) = (int) : quotient (int) % (int) = (int) : remainder (int) + (float) = (float) : sum (int) - (float) = (float) : difference (int) * (float) = (float) : product (int) / (float) = (float) : quotient (int) + (char) = (char) : sum (int) - (char) = (char) : difference","title":"Arithmetic Operators"},{"location":"pages/operators/#bitwise-operators","text":"(int) & (int) = (int) : bitwise AND (int) | (int) = (int) : bitwise OR (int) ^ (int) = (int) : bitwise XOR (int) &^ (int) = (int) : bitclear (AND NOT) (int) << (int) = (int) : left shift (int) >> (int) = (int) : right shift","title":"Bitwise Operators"},{"location":"pages/operators/#comparison-operators","text":"(int) < (int) = (bool) : less than (int) > (int) = (bool) : greater than (int) <= (int) = (bool) : less than or equal to (int) >= (int) = (bool) : greater than or equal to (int) < (float) = (bool) : less than (int) > (float) = (bool) : greater than (int) <= (float) = (bool) : less than or equal to (int) >= (float) = (bool) : greater than or equal to (int) < (char) = (bool) : less than (int) > (char) = (bool) : greater than (int) <= (char) = (bool) : less than or equal to (int) >= (char) = (bool) : greater than or equal to","title":"Comparison Operators"},{"location":"pages/operators/#float","text":"","title":"Float"},{"location":"pages/operators/#equality_1","text":"(float) == (float) = (bool) : equality (float) != (float) = (bool) : inequality","title":"Equality"},{"location":"pages/operators/#arithmetic-operators_1","text":"(float) + (float) = (float) : sum (float) - (float) = (float) : difference (float) * (float) = (float) : product (float) / (float) = (float) : quotient (float) + (int) = (int) : sum (float) - (int) = (int) : difference (float) * (int) = (int) : product (float) / (int) = (int) : quotient","title":"Arithmetic Operators"},{"location":"pages/operators/#comparison-operators_1","text":"(float) < (float) = (bool) : less than (float) > (float) = (bool) : greater than (float) <= (float) = (bool) : less than or equal to (float) >= (float) = (bool) : greater than or equal to (float) < (int) = (bool) : less than (float) > (int) = (bool) : greater than (float) <= (int) = (bool) : less than or equal to (float) >= (int) = (bool) : greater than or equal to","title":"Comparison Operators"},{"location":"pages/operators/#string","text":"","title":"String"},{"location":"pages/operators/#equality_2","text":"(string) == (string) = (bool) : equality (string) != (string) = (bool) : inequality","title":"Equality"},{"location":"pages/operators/#concatenation","text":"(string) + (string) = (string) : concatenation (string) + (other types) = (string) : concatenation (after string-converted)","title":"Concatenation"},{"location":"pages/operators/#comparison-operators_2","text":"(string) < (string) = (bool) : less than (string) > (string) = (bool) : greater than (string) <= (string) = (bool) : less than or equal to (string) >= (string) = (bool) : greater than or equal to","title":"Comparison Operators"},{"location":"pages/operators/#char","text":"","title":"Char"},{"location":"pages/operators/#equality_3","text":"(char) == (char) = (bool) : equality (char) != (char) = (bool) : inequality","title":"Equality"},{"location":"pages/operators/#arithmetic-operators_2","text":"(char) + (char) = (char) : sum (char) - (char) = (char) : difference (char) + (int) = (char) : sum (char) - (int) = (char) : difference","title":"Arithmetic Operators"},{"location":"pages/operators/#comparison-operators_3","text":"(char) < (char) = (bool) : less than (char) > (char) = (bool) : greater than (char) <= (char) = (bool) : less than or equal to (char) >= (char) = (bool) : greater than or equal to (char) < (int) = (bool) : less than (char) > (int) = (bool) : greater than (char) <= (int) = (bool) : less than or equal to (char) >= (int) = (bool) : greater than or equal to","title":"Comparison Operators"},{"location":"pages/operators/#bool","text":"","title":"Bool"},{"location":"pages/operators/#equality_4","text":"(bool) == (bool) = (bool) : equality (bool) != (bool) = (bool) : inequality","title":"Equality"},{"location":"pages/operators/#bytes","text":"","title":"Bytes"},{"location":"pages/operators/#equality_5","text":"Test whether two byte array contain the same data. Uses bytes.Compare internally. (bytes) == (bytes) = (bool) : equality (bytes) != (bytes) = (bool) : inequality","title":"Equality"},{"location":"pages/operators/#time","text":"","title":"Time"},{"location":"pages/operators/#equality_6","text":"Tests whether two times represent the same time instance. Uses Time.Equal internally. (time) == (time) = (bool) : equality (time) != (time) = (bool) : inequality","title":"Equality"},{"location":"pages/operators/#arithmetic-operators_3","text":"(time) - (time) = (int) : difference in nanoseconds (duration) (time) + (int) = (time) : time + duration (nanoseconds) (time) - (int) = (time) : time - duration (nanoseconds)","title":"Arithmetic Operators"},{"location":"pages/operators/#comparison-operators_4","text":"(time) < (time) = (bool) : less than (time) > (time) = (bool) : greater than (time) <= (time) = (bool) : less than or equal to (time) >= (time) = (bool) : greater than or equal to","title":"Comparison Operators"},{"location":"pages/operators/#array-and-immutablearray","text":"","title":"Array and ImmutableArray"},{"location":"pages/operators/#equality_7","text":"Tests whether two (immutable) arrays contain the same objects. (array) == (array) = (bool) : equality (array) != (array) = (bool) : inequality (array) == (immutable-array) = (bool) : equality (array) != (immutable-array) = (bool) : inequality (immutable-array) == (immutable-array) = (bool) : equality (immutable-array) != (immutable-array) = (bool) : inequality (immutable-array) == (array) = (bool) : equality (immutable-array) != (array) = (bool) : inequality","title":"Equality"},{"location":"pages/operators/#concatenation_1","text":"(array) + (array) : return a concatenated array","title":"Concatenation"},{"location":"pages/operators/#map-and-immutablemap","text":"","title":"Map and ImmutableMap"},{"location":"pages/operators/#equality_8","text":"Tests whether two (immutable) maps contain the same key-objects. (map) == (map) = (bool) : equality (map) != (map) = (bool) : inequality (map) == (immutable-map) = (bool) : equality (map) != (immutable-map) = (bool) : inequality (immutable-map) == (immutable-map) = (bool) : equality (immutable-map) != (immutable-map) = (bool) : inequality (immutable-map) == (map) = (bool) : equality (immutable-map) != (map) = (bool) : inequality","title":"Equality"},{"location":"pages/runtime-types/","text":"Tender Runtime Types Int : signed 64bit integer String : string Float : 64bit floating point Bool : boolean Char : character ( rune in Go) Bytes : byte array ( []byte in Go) Array : objects array ( []Object in Go) ImmutableArray : immutable object array ( []Object in Go) Map : objects map with string keys ( map[string]Object in Go) ImmutableMap : immutable object map with string keys ( map[string]Object in Go) Time : time ( time.Time in Go) Error : an error with underlying Object value of any type Null : null Type Conversion/Coercion Table src\\dst Int String Float Bool Char Bytes Array Map Time Error Null Int - strconv float64(v) !IsFalsy() rune(v) X X X time.Unix() X X String strconv - strconv !IsFalsy() X []byte(s) X X X X X Float int64(f) strconv - !IsFalsy() X X X X X X X Bool 1 / 0 \"true\" / \"false\" X - X X X X X X X Char int64(c) string(c) X !IsFalsy() - X X X X X X Bytes X string(y) X !IsFalsy() X - X X X X X Array X \"[...]\" X !IsFalsy() X X - X X X X Map X \"{...}\" X !IsFalsy() X X X - X X X Time X String() X !IsFalsy() X X X X - X X Error X \"error: ...\" X false X X X X X - X Null X X X false X X X X X X - X : No conversion; Typed value functions for Variable will return zero values. strconv: converted using Go's conversion functions from strconv package. IsFalsy(): use Object.IsFalsy() function_ _ String(): use Object.String() function * time.Unix(): use time.Unix(v, 0) to convert to Time Object.IsFalsy() Object.IsFalsy() interface method is used to determine if a given value should evaluate to false (e.g. for condition expression of if statement). Int : n == 0 String : len(s) == 0 Float : isNaN(f) Bool : !b Char : c == 0 Bytes : len(bytes) == 0 Array : len(arr) == 0 Map : len(map) == 0 Time : Time.IsZero() Error : true (Error is always falsy) Null : true (Null is always falsy) Type Conversion Builtin Functions string(x) : tries to convert x into string; returns null if failed int(x) : tries to convert x into int; returns null if failed bool(x) : tries to convert x into bool; returns null if failed float(x) : tries to convert x into float; returns null if failed char(x) : tries to convert x into char; returns null if failed bytes(x) : tries to convert x into bytes; returns null if failed bytes(N) : as a special case this will create a Bytes variable with the given size N (only if N is int) time(x) : tries to convert x into time; returns null if failed Type Checking Builtin Functions is_string(x) : returns true if x is string; false otherwise is_int(x) : returns true if x is int; false otherwise is_bool(x) : returns true if x is bool; false otherwise is_float(x) : returns true if x is float; false otherwise is_char(x) : returns true if x is char; false otherwise is_bytes(x) : returns true if x is bytes; false otherwise is_array(x) : return true if x is array; false otherwise is_immutable_array(x) : return true if x is immutable array; false otherwise is_map(x) : return true if x is map; false otherwise is_immutable_map(x) : return true if x is immutable map; false otherwise is_time(x) : return true if x is time; false otherwise is_error(x) : returns true if x is error; false otherwise is_null(x) : returns true if x is null; false otherwise","title":"Tender Runtime Types"},{"location":"pages/runtime-types/#tender-runtime-types","text":"Int : signed 64bit integer String : string Float : 64bit floating point Bool : boolean Char : character ( rune in Go) Bytes : byte array ( []byte in Go) Array : objects array ( []Object in Go) ImmutableArray : immutable object array ( []Object in Go) Map : objects map with string keys ( map[string]Object in Go) ImmutableMap : immutable object map with string keys ( map[string]Object in Go) Time : time ( time.Time in Go) Error : an error with underlying Object value of any type Null : null","title":"Tender Runtime Types"},{"location":"pages/runtime-types/#type-conversioncoercion-table","text":"src\\dst Int String Float Bool Char Bytes Array Map Time Error Null Int - strconv float64(v) !IsFalsy() rune(v) X X X time.Unix() X X String strconv - strconv !IsFalsy() X []byte(s) X X X X X Float int64(f) strconv - !IsFalsy() X X X X X X X Bool 1 / 0 \"true\" / \"false\" X - X X X X X X X Char int64(c) string(c) X !IsFalsy() - X X X X X X Bytes X string(y) X !IsFalsy() X - X X X X X Array X \"[...]\" X !IsFalsy() X X - X X X X Map X \"{...}\" X !IsFalsy() X X X - X X X Time X String() X !IsFalsy() X X X X - X X Error X \"error: ...\" X false X X X X X - X Null X X X false X X X X X X - X : No conversion; Typed value functions for Variable will return zero values. strconv: converted using Go's conversion functions from strconv package. IsFalsy(): use Object.IsFalsy() function_ _ String(): use Object.String() function * time.Unix(): use time.Unix(v, 0) to convert to Time","title":"Type Conversion/Coercion Table"},{"location":"pages/runtime-types/#objectisfalsy","text":"Object.IsFalsy() interface method is used to determine if a given value should evaluate to false (e.g. for condition expression of if statement). Int : n == 0 String : len(s) == 0 Float : isNaN(f) Bool : !b Char : c == 0 Bytes : len(bytes) == 0 Array : len(arr) == 0 Map : len(map) == 0 Time : Time.IsZero() Error : true (Error is always falsy) Null : true (Null is always falsy)","title":"Object.IsFalsy()"},{"location":"pages/runtime-types/#type-conversion-builtin-functions","text":"string(x) : tries to convert x into string; returns null if failed int(x) : tries to convert x into int; returns null if failed bool(x) : tries to convert x into bool; returns null if failed float(x) : tries to convert x into float; returns null if failed char(x) : tries to convert x into char; returns null if failed bytes(x) : tries to convert x into bytes; returns null if failed bytes(N) : as a special case this will create a Bytes variable with the given size N (only if N is int) time(x) : tries to convert x into time; returns null if failed","title":"Type Conversion Builtin Functions"},{"location":"pages/runtime-types/#type-checking-builtin-functions","text":"is_string(x) : returns true if x is string; false otherwise is_int(x) : returns true if x is int; false otherwise is_bool(x) : returns true if x is bool; false otherwise is_float(x) : returns true if x is float; false otherwise is_char(x) : returns true if x is char; false otherwise is_bytes(x) : returns true if x is bytes; false otherwise is_array(x) : return true if x is array; false otherwise is_immutable_array(x) : return true if x is immutable array; false otherwise is_map(x) : return true if x is map; false otherwise is_immutable_map(x) : return true if x is immutable map; false otherwise is_time(x) : return true if x is time; false otherwise is_error(x) : returns true if x is error; false otherwise is_null(x) : returns true if x is null; false otherwise","title":"Type Checking Builtin Functions"},{"location":"pages/stdlib-audio/","text":"Audio Module Documentation The audio module provides functionalities for initializing an audio context and creating audio players for playing MP3 files. Functions init() Initializes the audio context with the specified options. player(data) Creates an audio player for playing MP3 audio data. data : Byte array containing MP3 audio data. Audio Context Functions suspend() Suspends the audio context. resume() Resumes the audio context. Audio Player Functions decoder Returns information about the audio decoder. length() : Returns the length of the audio in milliseconds. sample_rate() : Returns the sample rate of the audio. seek(position) : Seeks to the specified position in the audio. play() Plays the audio. pause() Pauses the audio playback. is_playing() Checks if the audio is currently playing. close() Closes the audio player. err() Returns any error encountered during audio playback. reset() Resets the audio player. buffered_size() Returns the size of the audio buffer. set_buffer_size(size) Sets the size of the audio buffer. size : Size of the audio buffer in bytes. set_volume(volume) Sets the volume level of the audio player. volume : Volume level (0.0 to 1.0). volume() Returns the current volume level of the audio player. seek(position) Seeks to the specified position in the audio. position : Position to seek to in milliseconds. Example Usage import \"audio\" // Initialize the audio context audio.init() // Embed the audio data var mp3_data = embed(\"myaudio.mp3\") // Create an audio player var player = audio.player(mp3_data) // Play the audio player.play() for player.is_playing() {} println(\"Played!\")","title":"Stdlib audio"},{"location":"pages/stdlib-audio/#audio-module-documentation","text":"The audio module provides functionalities for initializing an audio context and creating audio players for playing MP3 files.","title":"Audio Module Documentation"},{"location":"pages/stdlib-audio/#functions","text":"","title":"Functions"},{"location":"pages/stdlib-audio/#init","text":"Initializes the audio context with the specified options.","title":"init()"},{"location":"pages/stdlib-audio/#playerdata","text":"Creates an audio player for playing MP3 audio data. data : Byte array containing MP3 audio data.","title":"player(data)"},{"location":"pages/stdlib-audio/#audio-context-functions","text":"","title":"Audio Context Functions"},{"location":"pages/stdlib-audio/#suspend","text":"Suspends the audio context.","title":"suspend()"},{"location":"pages/stdlib-audio/#resume","text":"Resumes the audio context.","title":"resume()"},{"location":"pages/stdlib-audio/#audio-player-functions","text":"","title":"Audio Player Functions"},{"location":"pages/stdlib-audio/#decoder","text":"Returns information about the audio decoder. length() : Returns the length of the audio in milliseconds. sample_rate() : Returns the sample rate of the audio. seek(position) : Seeks to the specified position in the audio.","title":"decoder"},{"location":"pages/stdlib-audio/#play","text":"Plays the audio.","title":"play()"},{"location":"pages/stdlib-audio/#pause","text":"Pauses the audio playback.","title":"pause()"},{"location":"pages/stdlib-audio/#is_playing","text":"Checks if the audio is currently playing.","title":"is_playing()"},{"location":"pages/stdlib-audio/#close","text":"Closes the audio player.","title":"close()"},{"location":"pages/stdlib-audio/#err","text":"Returns any error encountered during audio playback.","title":"err()"},{"location":"pages/stdlib-audio/#reset","text":"Resets the audio player.","title":"reset()"},{"location":"pages/stdlib-audio/#buffered_size","text":"Returns the size of the audio buffer.","title":"buffered_size()"},{"location":"pages/stdlib-audio/#set_buffer_sizesize","text":"Sets the size of the audio buffer. size : Size of the audio buffer in bytes.","title":"set_buffer_size(size)"},{"location":"pages/stdlib-audio/#set_volumevolume","text":"Sets the volume level of the audio player. volume : Volume level (0.0 to 1.0).","title":"set_volume(volume)"},{"location":"pages/stdlib-audio/#volume","text":"Returns the current volume level of the audio player.","title":"volume()"},{"location":"pages/stdlib-audio/#seekposition","text":"Seeks to the specified position in the audio. position : Position to seek to in milliseconds.","title":"seek(position)"},{"location":"pages/stdlib-audio/#example-usage","text":"import \"audio\" // Initialize the audio context audio.init() // Embed the audio data var mp3_data = embed(\"myaudio.mp3\") // Create an audio player var player = audio.player(mp3_data) // Play the audio player.play() for player.is_playing() {} println(\"Played!\")","title":"Example Usage"},{"location":"pages/stdlib-base64/","text":"Base64 Module Documentation The base64 module provides functions for base64 encoding and decoding. Functions encode(src) : returns the base64 encoding of src. decode(s) : returns the bytes represented by the base64 string s. raw_encode(src) : returns the base64 encoding of src but omits the padding. raw_decode(s) : returns the bytes represented by the base64 string s which omits the padding. url_encode(src) : returns the url-base64 encoding of src. url_decode(s) : returns the bytes represented by the url-base64 string s. raw_url_encode(src) : returns the url-base64 encoding of src but omits the padding. raw_url_decode(s) : returns the bytes represented by the url-base64 string s which omits the padding.","title":"Stdlib base64"},{"location":"pages/stdlib-base64/#base64-module-documentation","text":"The base64 module provides functions for base64 encoding and decoding.","title":"Base64 Module Documentation"},{"location":"pages/stdlib-base64/#functions","text":"encode(src) : returns the base64 encoding of src. decode(s) : returns the bytes represented by the base64 string s. raw_encode(src) : returns the base64 encoding of src but omits the padding. raw_decode(s) : returns the bytes represented by the base64 string s which omits the padding. url_encode(src) : returns the url-base64 encoding of src. url_decode(s) : returns the bytes represented by the url-base64 string s. raw_url_encode(src) : returns the url-base64 encoding of src but omits the padding. raw_url_decode(s) : returns the bytes represented by the url-base64 string s which omits the padding.","title":"Functions"},{"location":"pages/stdlib-bufio/","text":"bufio Module Documentation The bufio module provides functions for buffered I/O operations, particularly useful for reading input from standard input (stdin). Functions readline() Reads a line of text from standard input until a newline character ( \"\\n\" ) is encountered. readstring(delimiter) Reads a string from standard input until the specified delimiter character is encountered. delimiter : Delimiter character to stop reading the string. readbytes(num_bytes) Reads a specified number of bytes from standard input. num_bytes : Number of bytes to read. Example Usage import \"bufio\" line := bufio.readline() println(\"Line read:\", line) // Read a string until a specific delimiter character delimiter := \"\\n\" string_input := bufio.readstring(delimiter) println(\"String read until delimiter:\", string_input) // Read a specified number of bytes num_bytes := 10 bytes_read := bufio.readbytes(num_bytes) println(\"Bytes read:\", bytes_read)","title":"Stdlib bufio"},{"location":"pages/stdlib-bufio/#bufio-module-documentation","text":"The bufio module provides functions for buffered I/O operations, particularly useful for reading input from standard input (stdin).","title":"bufio Module Documentation"},{"location":"pages/stdlib-bufio/#functions","text":"","title":"Functions"},{"location":"pages/stdlib-bufio/#readline","text":"Reads a line of text from standard input until a newline character ( \"\\n\" ) is encountered.","title":"readline()"},{"location":"pages/stdlib-bufio/#readstringdelimiter","text":"Reads a string from standard input until the specified delimiter character is encountered. delimiter : Delimiter character to stop reading the string.","title":"readstring(delimiter)"},{"location":"pages/stdlib-bufio/#readbytesnum_bytes","text":"Reads a specified number of bytes from standard input. num_bytes : Number of bytes to read.","title":"readbytes(num_bytes)"},{"location":"pages/stdlib-bufio/#example-usage","text":"import \"bufio\" line := bufio.readline() println(\"Line read:\", line) // Read a string until a specific delimiter character delimiter := \"\\n\" string_input := bufio.readstring(delimiter) println(\"String read until delimiter:\", string_input) // Read a specified number of bytes num_bytes := 10 bytes_read := bufio.readbytes(num_bytes) println(\"Bytes read:\", bytes_read)","title":"Example Usage"},{"location":"pages/stdlib-canvas/","text":"Canvas Module Documentation The canvas module provides functionalities for creating and manipulating graphical elements. Functions new_context(width, height) Creates a new canvas context with the specified width and height. width : Width of the canvas context. height : Height of the canvas context. load_image(image_bytes) Loads an image from the provided byte array. image_bytes : Byte array representing the image data. radians(degrees) Converts degrees to radians. degrees : Angle in degrees. degrees(radians) Converts radians to degrees. radians : Angle in radians. new_window(width, height, title, update_function) Creates a new window with the specified width, height, and title. The update_function is called to update the content of the window. width : Width of the window. height : Height of the window. title : Title of the window. update_function : Function responsible for updating the content of the window. import \"canvas\" canvas.new_window(600, 400, \"Hello World\", fn(w){ for {} }) new_window(options, update_function) Note: Only supports on windows platform. Creates a new window with the specified options. The update_function is called to update the content of the window. import \"canvas\" var options = { width: 600, height: 400, title: \"Hello World\", fullscreen: false, borderless: false, top_most: false, no_scaling: false, x: 200, y: 10 } canvas.new_window(options, fn(w){ for {} }) canvas Context Functions Drawing Functions drawimage(image_bytes, x, y) drawimage_anchored(image_bytes, x, y, anchor_x, anchor_y) savepng(filename) point(x, y) line(x1, y1, x2, y2) rect(x, y, width, height) polygon(sides, x_center, y_center, radius, rotation) rounderect(x, y, width, height, radius) circle(x, y, radius) arc(x, y, radius, start_angle, end_angle) ellipse(x, y, x_radius, y_radius) ellipsearc(x, y, x_radius, y_radius, start_angle, end_angle) Style Functions set_pixel(x, y) rgb(r, g, b) rgba(r, g, b, a) rgb255(r, g, b) rgba255(r, g, b, a) hex(color) linewidth(width) dashoffset(offset) dash(...) Path Functions move_to(x, y) line_to(x, y) quadratic_to(x1, y1, x2, y2) cubic_to(x1, y1, x2, y2, x3, y3) closepath() clearpath() newsubpath() clear() Drawing State Functions stroke() fill() stroke_preserve() fill_preserve() push() pop() clip() clip_preserve() resetclip() Text Functions text(text, x, y) text_anchored(text, x, y, anchor_x, anchor_y) measure_text(text) measure_multiline_text(text) load_fontface(font_path) fontface(font_data) fontheight() Transformation Functions identity() translate(x, y) scale(scale_x, scale_y) rotate(angle) shear(shear_x, shear_y) scaleabout(scale_x, scale_y, x, y) rotateabout(angle, x, y) shearabout(shear_x, shear_y, x, y) transform_point(x, y) Other Functions height() width() wordwrap(text, max_width) Image Functions image() Example Usage import \"canvas\" ctx := canvas.new_context(200, 200) ctx.hex(`#121212`) ctx.clear() ctx.hex(\"#0f0\") ctx.dash(4) ctx.rect(50, 50, 100, 100) ctx.stroke() ctx.save_png(\"output.png\")","title":"Stdlib canvas"},{"location":"pages/stdlib-canvas/#canvas-module-documentation","text":"The canvas module provides functionalities for creating and manipulating graphical elements.","title":"Canvas Module Documentation"},{"location":"pages/stdlib-canvas/#functions","text":"","title":"Functions"},{"location":"pages/stdlib-canvas/#new_contextwidth-height","text":"Creates a new canvas context with the specified width and height. width : Width of the canvas context. height : Height of the canvas context.","title":"new_context(width, height)"},{"location":"pages/stdlib-canvas/#load_imageimage_bytes","text":"Loads an image from the provided byte array. image_bytes : Byte array representing the image data.","title":"load_image(image_bytes)"},{"location":"pages/stdlib-canvas/#radiansdegrees","text":"Converts degrees to radians. degrees : Angle in degrees.","title":"radians(degrees)"},{"location":"pages/stdlib-canvas/#degreesradians","text":"Converts radians to degrees. radians : Angle in radians.","title":"degrees(radians)"},{"location":"pages/stdlib-canvas/#new_windowwidth-height-title-update_function","text":"Creates a new window with the specified width, height, and title. The update_function is called to update the content of the window. width : Width of the window. height : Height of the window. title : Title of the window. update_function : Function responsible for updating the content of the window. import \"canvas\" canvas.new_window(600, 400, \"Hello World\", fn(w){ for {} })","title":"new_window(width, height, title, update_function)"},{"location":"pages/stdlib-canvas/#new_windowoptions-update_function","text":"Note: Only supports on windows platform. Creates a new window with the specified options. The update_function is called to update the content of the window. import \"canvas\" var options = { width: 600, height: 400, title: \"Hello World\", fullscreen: false, borderless: false, top_most: false, no_scaling: false, x: 200, y: 10 } canvas.new_window(options, fn(w){ for {} })","title":"new_window(options, update_function)"},{"location":"pages/stdlib-canvas/#canvas-context-functions","text":"","title":"canvas Context Functions"},{"location":"pages/stdlib-canvas/#drawing-functions","text":"drawimage(image_bytes, x, y) drawimage_anchored(image_bytes, x, y, anchor_x, anchor_y) savepng(filename) point(x, y) line(x1, y1, x2, y2) rect(x, y, width, height) polygon(sides, x_center, y_center, radius, rotation) rounderect(x, y, width, height, radius) circle(x, y, radius) arc(x, y, radius, start_angle, end_angle) ellipse(x, y, x_radius, y_radius) ellipsearc(x, y, x_radius, y_radius, start_angle, end_angle)","title":"Drawing Functions"},{"location":"pages/stdlib-canvas/#style-functions","text":"set_pixel(x, y) rgb(r, g, b) rgba(r, g, b, a) rgb255(r, g, b) rgba255(r, g, b, a) hex(color) linewidth(width) dashoffset(offset) dash(...)","title":"Style Functions"},{"location":"pages/stdlib-canvas/#path-functions","text":"move_to(x, y) line_to(x, y) quadratic_to(x1, y1, x2, y2) cubic_to(x1, y1, x2, y2, x3, y3) closepath() clearpath() newsubpath() clear()","title":"Path Functions"},{"location":"pages/stdlib-canvas/#drawing-state-functions","text":"stroke() fill() stroke_preserve() fill_preserve() push() pop() clip() clip_preserve() resetclip()","title":"Drawing State Functions"},{"location":"pages/stdlib-canvas/#text-functions","text":"text(text, x, y) text_anchored(text, x, y, anchor_x, anchor_y) measure_text(text) measure_multiline_text(text) load_fontface(font_path) fontface(font_data) fontheight()","title":"Text Functions"},{"location":"pages/stdlib-canvas/#transformation-functions","text":"identity() translate(x, y) scale(scale_x, scale_y) rotate(angle) shear(shear_x, shear_y) scaleabout(scale_x, scale_y, x, y) rotateabout(angle, x, y) shearabout(shear_x, shear_y, x, y) transform_point(x, y)","title":"Transformation Functions"},{"location":"pages/stdlib-canvas/#other-functions","text":"height() width() wordwrap(text, max_width)","title":"Other Functions"},{"location":"pages/stdlib-canvas/#image-functions","text":"image()","title":"Image Functions"},{"location":"pages/stdlib-canvas/#example-usage","text":"import \"canvas\" ctx := canvas.new_context(200, 200) ctx.hex(`#121212`) ctx.clear() ctx.hex(\"#0f0\") ctx.dash(4) ctx.rect(50, 50, 100, 100) ctx.stroke() ctx.save_png(\"output.png\")","title":"Example Usage"},{"location":"pages/stdlib-colors/","text":"colors Module The colors module provides functions and constants for printing colored text to the terminal. Functions print(...args) : Prints the given arguments to the terminal without a newline character, with support for colored text. println(...args) : Prints the given arguments to the terminal with a newline character at the end, with support for colored text. Constants reset : Resets the text color to the default. Regular Colors: black red green yellow blue purple cyan white Bold Colors: bblack bred bgreen byellow bblue bpurple bcyan bwhite Underline Colors: ublack ured ugreen uyellow ublue upurple ucyan uwhite Background Colors: on_black on_red on_green on_yellow on_blue on_purple on_cyan on_white High Intensity Colors: iblack ired igreen iyellow iblue ipurple icyan iwhite Bold High Intensity Colors: biblack bired bigreen biyellow biblue bipurple bicyan biwhite High Intensity Background Colors: on_iblack on_ired on_igreen on_iyellow on_iblue on_ipurple on_icyan on_iwhite Example Usage import \"colors\" as color color.println(color.green + \"hello\" + color.reset)","title":"colors Module"},{"location":"pages/stdlib-colors/#colors-module","text":"The colors module provides functions and constants for printing colored text to the terminal.","title":"colors Module"},{"location":"pages/stdlib-colors/#functions","text":"print(...args) : Prints the given arguments to the terminal without a newline character, with support for colored text. println(...args) : Prints the given arguments to the terminal with a newline character at the end, with support for colored text.","title":"Functions"},{"location":"pages/stdlib-colors/#constants","text":"reset : Resets the text color to the default. Regular Colors: black red green yellow blue purple cyan white Bold Colors: bblack bred bgreen byellow bblue bpurple bcyan bwhite Underline Colors: ublack ured ugreen uyellow ublue upurple ucyan uwhite Background Colors: on_black on_red on_green on_yellow on_blue on_purple on_cyan on_white High Intensity Colors: iblack ired igreen iyellow iblue ipurple icyan iwhite Bold High Intensity Colors: biblack bired bigreen biyellow biblue bipurple bicyan biwhite High Intensity Background Colors: on_iblack on_ired on_igreen on_iyellow on_iblue on_ipurple on_icyan on_iwhite","title":"Constants"},{"location":"pages/stdlib-colors/#example-usage","text":"import \"colors\" as color color.println(color.green + \"hello\" + color.reset)","title":"Example Usage"},{"location":"pages/stdlib-crypto/","text":"Crypto Module Documentation The crypto module provides various cryptographic functionalities, including hashing and encryption/decryption. Functions md5(input) Generates an MD5 hash for the given input. input : The data to hash (byte array). Returns the MD5 hash as a hexadecimal string. sha1(input) Generates a SHA-1 hash for the given input. input : The data to hash (byte array). Returns the SHA-1 hash as a hexadecimal string. sha256(input) Generates a SHA-256 hash for the given input. input : The data to hash (byte array). Returns the SHA-256 hash as a hexadecimal string. sha512(input) Generates a SHA-512 hash for the given input. input : The data to hash (byte array). Returns the SHA-512 hash as a hexadecimal string. sha3_256(input) Generates a SHA3-256 hash for the given input. input : The data to hash (byte array). Returns the SHA3-256 hash as a hexadecimal string. AES (crypto.aes) The aes module provides functionalities for AES encryption and decryption. AES Functions encrypt(plaintext, key) Encrypts the given plaintext using the specified key. plaintext : The data to encrypt (byte array). key : The encryption key (byte array). Returns the encrypted data as a byte array. decrypt(ciphertext, key) Decrypts the given ciphertext using the specified key. ciphertext : The data to decrypt (byte array). key : The decryption key (byte array). Returns the decrypted data as a byte array. block_size The block size of the AES cipher. Example Usage import \"crypto\" // Hashing examples md5hash := crypto.md5(\"example_data\") println(md5hash)","title":"Stdlib crypto"},{"location":"pages/stdlib-crypto/#crypto-module-documentation","text":"The crypto module provides various cryptographic functionalities, including hashing and encryption/decryption.","title":"Crypto Module Documentation"},{"location":"pages/stdlib-crypto/#functions","text":"","title":"Functions"},{"location":"pages/stdlib-crypto/#md5input","text":"Generates an MD5 hash for the given input. input : The data to hash (byte array). Returns the MD5 hash as a hexadecimal string.","title":"md5(input)"},{"location":"pages/stdlib-crypto/#sha1input","text":"Generates a SHA-1 hash for the given input. input : The data to hash (byte array). Returns the SHA-1 hash as a hexadecimal string.","title":"sha1(input)"},{"location":"pages/stdlib-crypto/#sha256input","text":"Generates a SHA-256 hash for the given input. input : The data to hash (byte array). Returns the SHA-256 hash as a hexadecimal string.","title":"sha256(input)"},{"location":"pages/stdlib-crypto/#sha512input","text":"Generates a SHA-512 hash for the given input. input : The data to hash (byte array). Returns the SHA-512 hash as a hexadecimal string.","title":"sha512(input)"},{"location":"pages/stdlib-crypto/#sha3_256input","text":"Generates a SHA3-256 hash for the given input. input : The data to hash (byte array). Returns the SHA3-256 hash as a hexadecimal string.","title":"sha3_256(input)"},{"location":"pages/stdlib-crypto/#aes-cryptoaes","text":"The aes module provides functionalities for AES encryption and decryption.","title":"AES (crypto.aes)"},{"location":"pages/stdlib-crypto/#aes-functions","text":"","title":"AES Functions"},{"location":"pages/stdlib-crypto/#encryptplaintext-key","text":"Encrypts the given plaintext using the specified key. plaintext : The data to encrypt (byte array). key : The encryption key (byte array). Returns the encrypted data as a byte array.","title":"encrypt(plaintext, key)"},{"location":"pages/stdlib-crypto/#decryptciphertext-key","text":"Decrypts the given ciphertext using the specified key. ciphertext : The data to decrypt (byte array). key : The decryption key (byte array). Returns the decrypted data as a byte array.","title":"decrypt(ciphertext, key)"},{"location":"pages/stdlib-crypto/#block_size","text":"The block size of the AES cipher.","title":"block_size"},{"location":"pages/stdlib-crypto/#example-usage","text":"import \"crypto\" // Hashing examples md5hash := crypto.md5(\"example_data\") println(md5hash)","title":"Example Usage"},{"location":"pages/stdlib-dll/","text":"DLL Module Documentation The dll module provides functionalities for loading and calling functions from dynamic-link libraries (DLLs) in the Windows environment. Functions new(dll_name) Loads a dynamic-link library (DLL) with the specified name. dll_name : Name of the DLL file to load. load(dll_name) Loads a dynamic-link library (DLL) with the specified name. dll_name : Name of the DLL file to load. DLL Functions proc(function_name) Retrieves a procedure address from the loaded DLL. function_name : Name of the function to retrieve. call(arguments...) Calls a function from the loaded DLL. arguments : Arguments to pass to the function. Example Usage Example DLL in C // example_dll.c #include <stdio.h> #include <stdlib.h> #ifdef _WIN32 #define EXPORT __declspec(dllexport) #else #define EXPORT #endif EXPORT int add(int a, int b) { return a + b; } Loading and Using the DLL in Tender // example.td import \"dll\" // Load the DLL my_dll := dll.load(\"example_dll.dll\") // Get the 'add' function from the DLL add_func := my_dll.proc(\"add\") // Call the 'add' function with arguments result := add_func.call(3, 4) // Print the result println(\"Result of addition:\", result) // Output: Result of addition: 7 How to compile dll Compile the C code into a DLL. For example, using MinGW on Windows: gcc -shared -o example_dll.dll example_dll.c Load and use the DLL in Tender as shown in the example above. tender test_dll.td","title":"Stdlib dll"},{"location":"pages/stdlib-dll/#dll-module-documentation","text":"The dll module provides functionalities for loading and calling functions from dynamic-link libraries (DLLs) in the Windows environment.","title":"DLL Module Documentation"},{"location":"pages/stdlib-dll/#functions","text":"","title":"Functions"},{"location":"pages/stdlib-dll/#newdll_name","text":"Loads a dynamic-link library (DLL) with the specified name. dll_name : Name of the DLL file to load.","title":"new(dll_name)"},{"location":"pages/stdlib-dll/#loaddll_name","text":"Loads a dynamic-link library (DLL) with the specified name. dll_name : Name of the DLL file to load.","title":"load(dll_name)"},{"location":"pages/stdlib-dll/#dll-functions","text":"","title":"DLL Functions"},{"location":"pages/stdlib-dll/#procfunction_name","text":"Retrieves a procedure address from the loaded DLL. function_name : Name of the function to retrieve.","title":"proc(function_name)"},{"location":"pages/stdlib-dll/#callarguments","text":"Calls a function from the loaded DLL. arguments : Arguments to pass to the function.","title":"call(arguments...)"},{"location":"pages/stdlib-dll/#example-usage","text":"","title":"Example Usage"},{"location":"pages/stdlib-dll/#example-dll-in-c","text":"// example_dll.c #include <stdio.h> #include <stdlib.h> #ifdef _WIN32 #define EXPORT __declspec(dllexport) #else #define EXPORT #endif EXPORT int add(int a, int b) { return a + b; }","title":"Example DLL in C"},{"location":"pages/stdlib-dll/#loading-and-using-the-dll-in-tender","text":"// example.td import \"dll\" // Load the DLL my_dll := dll.load(\"example_dll.dll\") // Get the 'add' function from the DLL add_func := my_dll.proc(\"add\") // Call the 'add' function with arguments result := add_func.call(3, 4) // Print the result println(\"Result of addition:\", result) // Output: Result of addition: 7","title":"Loading and Using the DLL in Tender"},{"location":"pages/stdlib-dll/#how-to-compile-dll","text":"Compile the C code into a DLL. For example, using MinGW on Windows: gcc -shared -o example_dll.dll example_dll.c Load and use the DLL in Tender as shown in the example above. tender test_dll.td","title":"How to compile dll"},{"location":"pages/stdlib-fmt/","text":"Fmt Module Documentation The fmt module provides functions for formatted I/O operations similar to those in the standard Go fmt package. Functions print(args...) Prints the arguments to standard output without a newline. args : The objects to print. Each object will be converted to a string. Returns null . println(args...) Prints the arguments to standard output with a newline. args : The objects to print. Each object will be converted to a string. Returns null . printf(format, args...) Prints the formatted string to standard output. format : A format string. args : The objects to format and print. Returns null . sprintf(format, args...) Returns a formatted string. format : A format string. args : The objects to format. Returns the formatted string as a string . scanln() Reads a line from standard input. Returns the input as a string . Example Usage import \"fmt\" // Print example fmt.print(\"Hello, \", \"world\") // Println example fmt.println(\"Hello, \", \"world\") // Printf example fmt.printf(\"Hello, %s\", \"world\") // Sprintf example formatted_string := fmt.sprintf(\"Hello, %s\", \"world\") println(formatted_string) // Scanln example input := fmt.scanln() println(\"You entered: \", input)","title":"Stdlib fmt"},{"location":"pages/stdlib-fmt/#fmt-module-documentation","text":"The fmt module provides functions for formatted I/O operations similar to those in the standard Go fmt package.","title":"Fmt Module Documentation"},{"location":"pages/stdlib-fmt/#functions","text":"","title":"Functions"},{"location":"pages/stdlib-fmt/#printargs","text":"Prints the arguments to standard output without a newline. args : The objects to print. Each object will be converted to a string. Returns null .","title":"print(args...)"},{"location":"pages/stdlib-fmt/#printlnargs","text":"Prints the arguments to standard output with a newline. args : The objects to print. Each object will be converted to a string. Returns null .","title":"println(args...)"},{"location":"pages/stdlib-fmt/#printfformat-args","text":"Prints the formatted string to standard output. format : A format string. args : The objects to format and print. Returns null .","title":"printf(format, args...)"},{"location":"pages/stdlib-fmt/#sprintfformat-args","text":"Returns a formatted string. format : A format string. args : The objects to format. Returns the formatted string as a string .","title":"sprintf(format, args...)"},{"location":"pages/stdlib-fmt/#scanln","text":"Reads a line from standard input. Returns the input as a string .","title":"scanln()"},{"location":"pages/stdlib-fmt/#example-usage","text":"import \"fmt\" // Print example fmt.print(\"Hello, \", \"world\") // Println example fmt.println(\"Hello, \", \"world\") // Printf example fmt.printf(\"Hello, %s\", \"world\") // Sprintf example formatted_string := fmt.sprintf(\"Hello, %s\", \"world\") println(formatted_string) // Scanln example input := fmt.scanln() println(\"You entered: \", input)","title":"Example Usage"},{"location":"pages/stdlib-gzip/","text":"Gzip Module Documentation The gzip module provides functions for compressing and decompressing data using the gzip compression format. Functions compress(data) : Compresses the input data using gzip compression and returns the compressed data as a byte slice. decompress(data) : Decompresses the input data using gzip decompression and returns the decompressed data as a byte slice. Example Usage import \"gzip\" // Compress data compressed_data := gzip.compress(\"Hello, World!\") // Decompress data decompressed_data := gzip.decompress(compressed_data)","title":"Stdlib gzip"},{"location":"pages/stdlib-gzip/#gzip-module-documentation","text":"The gzip module provides functions for compressing and decompressing data using the gzip compression format.","title":"Gzip Module Documentation"},{"location":"pages/stdlib-gzip/#functions","text":"compress(data) : Compresses the input data using gzip compression and returns the compressed data as a byte slice. decompress(data) : Decompresses the input data using gzip decompression and returns the decompressed data as a byte slice.","title":"Functions"},{"location":"pages/stdlib-gzip/#example-usage","text":"import \"gzip\" // Compress data compressed_data := gzip.compress(\"Hello, World!\") // Decompress data decompressed_data := gzip.decompress(compressed_data)","title":"Example Usage"},{"location":"pages/stdlib-hex/","text":"Hex Module Documentation The hex module provides functions for encoding and decoding data using hexadecimal representation, as well as for generating a hex dump of the data. Functions encode(src) : returns the hexadecimal encoding of src. decode(s) : returns the bytes represented by the hexadecimal string s. dump(src) : returns a string containing the hex dump of the input data.","title":"Stdlib hex"},{"location":"pages/stdlib-hex/#hex-module-documentation","text":"The hex module provides functions for encoding and decoding data using hexadecimal representation, as well as for generating a hex dump of the data.","title":"Hex Module Documentation"},{"location":"pages/stdlib-hex/#functions","text":"encode(src) : returns the hexadecimal encoding of src. decode(s) : returns the bytes represented by the hexadecimal string s. dump(src) : returns a string containing the hex dump of the input data.","title":"Functions"},{"location":"pages/stdlib-http/","text":"HTTP Module Documentation The http module provides functionalities for making HTTP requests. This module supports various HTTP methods including GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD, and TRACE. Functions get(url, [body], [headers]) Sends an HTTP GET request to the specified URL. url : The URL to which the request is sent. body (optional): Request body as a byte array. headers (optional): Map of request headers. post(url, [body], [headers]) Sends an HTTP POST request to the specified URL. url : The URL to which the request is sent. body (optional): Request body as a byte array. headers (optional): Map of request headers. put(url, [body], [headers]) Sends an HTTP PUT request to the specified URL. url : The URL to which the request is sent. body (optional): Request body as a byte array. headers (optional): Map of request headers. delete(url, [body], [headers]) Sends an HTTP DELETE request to the specified URL. url : The URL to which the request is sent. body (optional): Request body as a byte array. headers (optional): Map of request headers. patch(url, [body], [headers]) Sends an HTTP PATCH request to the specified URL. url : The URL to which the request is sent. body (optional): Request body as a byte array. headers (optional): Map of request headers. options(url, [body], [headers]) Sends an HTTP OPTIONS request to the specified URL. url : The URL to which the request is sent. body (optional): Request body as a byte array. headers (optional): Map of request headers. head(url, [body], [headers]) Sends an HTTP HEAD request to the specified URL. url : The URL to which the request is sent. body (optional): Request body as a byte array. headers (optional): Map of request headers. trace(url, [body], [headers]) Sends an HTTP TRACE request to the specified URL. url : The URL to which the request is sent. body (optional): Request body as a byte array. headers (optional): Map of request headers. Example Usage import \"http\" // GET request response := http.get(\"https://example.com\") if !is_error(response) { println(string(response)) } else { println(\"Response: \", response) }","title":"Stdlib http"},{"location":"pages/stdlib-http/#http-module-documentation","text":"The http module provides functionalities for making HTTP requests. This module supports various HTTP methods including GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD, and TRACE.","title":"HTTP Module Documentation"},{"location":"pages/stdlib-http/#functions","text":"","title":"Functions"},{"location":"pages/stdlib-http/#geturl-body-headers","text":"Sends an HTTP GET request to the specified URL. url : The URL to which the request is sent. body (optional): Request body as a byte array. headers (optional): Map of request headers.","title":"get(url, [body], [headers])"},{"location":"pages/stdlib-http/#posturl-body-headers","text":"Sends an HTTP POST request to the specified URL. url : The URL to which the request is sent. body (optional): Request body as a byte array. headers (optional): Map of request headers.","title":"post(url, [body], [headers])"},{"location":"pages/stdlib-http/#puturl-body-headers","text":"Sends an HTTP PUT request to the specified URL. url : The URL to which the request is sent. body (optional): Request body as a byte array. headers (optional): Map of request headers.","title":"put(url, [body], [headers])"},{"location":"pages/stdlib-http/#deleteurl-body-headers","text":"Sends an HTTP DELETE request to the specified URL. url : The URL to which the request is sent. body (optional): Request body as a byte array. headers (optional): Map of request headers.","title":"delete(url, [body], [headers])"},{"location":"pages/stdlib-http/#patchurl-body-headers","text":"Sends an HTTP PATCH request to the specified URL. url : The URL to which the request is sent. body (optional): Request body as a byte array. headers (optional): Map of request headers.","title":"patch(url, [body], [headers])"},{"location":"pages/stdlib-http/#optionsurl-body-headers","text":"Sends an HTTP OPTIONS request to the specified URL. url : The URL to which the request is sent. body (optional): Request body as a byte array. headers (optional): Map of request headers.","title":"options(url, [body], [headers])"},{"location":"pages/stdlib-http/#headurl-body-headers","text":"Sends an HTTP HEAD request to the specified URL. url : The URL to which the request is sent. body (optional): Request body as a byte array. headers (optional): Map of request headers.","title":"head(url, [body], [headers])"},{"location":"pages/stdlib-http/#traceurl-body-headers","text":"Sends an HTTP TRACE request to the specified URL. url : The URL to which the request is sent. body (optional): Request body as a byte array. headers (optional): Map of request headers.","title":"trace(url, [body], [headers])"},{"location":"pages/stdlib-http/#example-usage","text":"import \"http\" // GET request response := http.get(\"https://example.com\") if !is_error(response) { println(string(response)) } else { println(\"Response: \", response) }","title":"Example Usage"},{"location":"pages/stdlib-image/","text":"image Module Documentation The image module provides functionalities for working with images, including loading, decoding, creating new images, and encoding images into various formats. Functions new(width, height) Creates a new image with the specified width and height. width : Width of the new image. height : Height of the new image. load(path) Loads an image from the specified file path. path : Path to the image file. decode(image_data) Decodes image data into an image object. image_data : Byte array containing image data. formats Array containing supported image formats: PNG, JPEG, BMP, TIFF, and WebP. Image Functions encode(format) Encodes the image into the specified format. format : Format to encode the image (e.g., \"png\", \"jpeg\", \"bmp\", \"tiff\"). bounds() Returns the bounding rectangle of the image. at(x, y) Returns the color of the pixel at the specified coordinates. x : X-coordinate of the pixel. y : Y-coordinate of the pixel. pixels() Returns the total number of pixels in the image. get_pixels() Returns an array containing the pixel values of the image. set_pixels(pixels) Sets the pixel values of the image from the given array. pixels : Array containing pixel values. set(x, y, color) Sets the color of the pixel at the specified coordinates. x : X-coordinate of the pixel. y : Y-coordinate of the pixel. color : Array containing RGBA values of the color. save(path, format) Saves the image to the specified file path and format. path : Path to save the image. format : Format to save the image (e.g., \"png\", \"jpeg\", \"bmp\", \"tiff\"). Example Usage import \"image\" // Create a new image img := image.new(255, 255) for i := 0; i < 255; i++ { for j := 0; j < 255; j++ { color := [i, 0, j, 255] img.set(i, j, color) } } img.save(\"out.png\", \"png\")","title":"Stdlib image"},{"location":"pages/stdlib-image/#image-module-documentation","text":"The image module provides functionalities for working with images, including loading, decoding, creating new images, and encoding images into various formats.","title":"image Module Documentation"},{"location":"pages/stdlib-image/#functions","text":"","title":"Functions"},{"location":"pages/stdlib-image/#newwidth-height","text":"Creates a new image with the specified width and height. width : Width of the new image. height : Height of the new image.","title":"new(width, height)"},{"location":"pages/stdlib-image/#loadpath","text":"Loads an image from the specified file path. path : Path to the image file.","title":"load(path)"},{"location":"pages/stdlib-image/#decodeimage_data","text":"Decodes image data into an image object. image_data : Byte array containing image data.","title":"decode(image_data)"},{"location":"pages/stdlib-image/#formats","text":"Array containing supported image formats: PNG, JPEG, BMP, TIFF, and WebP.","title":"formats"},{"location":"pages/stdlib-image/#image-functions","text":"","title":"Image Functions"},{"location":"pages/stdlib-image/#encodeformat","text":"Encodes the image into the specified format. format : Format to encode the image (e.g., \"png\", \"jpeg\", \"bmp\", \"tiff\").","title":"encode(format)"},{"location":"pages/stdlib-image/#bounds","text":"Returns the bounding rectangle of the image.","title":"bounds()"},{"location":"pages/stdlib-image/#atx-y","text":"Returns the color of the pixel at the specified coordinates. x : X-coordinate of the pixel. y : Y-coordinate of the pixel.","title":"at(x, y)"},{"location":"pages/stdlib-image/#pixels","text":"Returns the total number of pixels in the image.","title":"pixels()"},{"location":"pages/stdlib-image/#get_pixels","text":"Returns an array containing the pixel values of the image.","title":"get_pixels()"},{"location":"pages/stdlib-image/#set_pixelspixels","text":"Sets the pixel values of the image from the given array. pixels : Array containing pixel values.","title":"set_pixels(pixels)"},{"location":"pages/stdlib-image/#setx-y-color","text":"Sets the color of the pixel at the specified coordinates. x : X-coordinate of the pixel. y : Y-coordinate of the pixel. color : Array containing RGBA values of the color.","title":"set(x, y, color)"},{"location":"pages/stdlib-image/#savepath-format","text":"Saves the image to the specified file path and format. path : Path to save the image. format : Format to save the image (e.g., \"png\", \"jpeg\", \"bmp\", \"tiff\").","title":"save(path, format)"},{"location":"pages/stdlib-image/#example-usage","text":"import \"image\" // Create a new image img := image.new(255, 255) for i := 0; i < 255; i++ { for j := 0; j < 255; j++ { color := [i, 0, j, 255] img.set(i, j, color) } } img.save(\"out.png\", \"png\")","title":"Example Usage"},{"location":"pages/stdlib-io/","text":"IO Module Documentation The io module provides functions for reading from and writing to files. Functions readfile(path) : Reads the contents of the file specified by the path parameter and returns it as a string. writefile(path, content[, mode]) : Writes the content to the file specified by the path parameter. The optional mode parameter specifies the file mode (permission and mode bits). If not provided, the default mode is 0644 . Example Usage import \"io\" // Read contents of a file content := io.readfile(\"/path/to/file.txt\") // Write contents to a file io.writefile(\"/path/to/file.txt\", \"Hello, World!\")","title":"Stdlib io"},{"location":"pages/stdlib-io/#io-module-documentation","text":"The io module provides functions for reading from and writing to files.","title":"IO Module Documentation"},{"location":"pages/stdlib-io/#functions","text":"readfile(path) : Reads the contents of the file specified by the path parameter and returns it as a string. writefile(path, content[, mode]) : Writes the content to the file specified by the path parameter. The optional mode parameter specifies the file mode (permission and mode bits). If not provided, the default mode is 0644 .","title":"Functions"},{"location":"pages/stdlib-io/#example-usage","text":"import \"io\" // Read contents of a file content := io.readfile(\"/path/to/file.txt\") // Write contents to a file io.writefile(\"/path/to/file.txt\", \"Hello, World!\")","title":"Example Usage"},{"location":"pages/stdlib-json/","text":"JSON Module Documentation The json module provides functionalities for playing with json! Functions decode(b string/bytes) => object : Parses the JSON string and returns an object. encode(o object) => bytes : Returns the JSON string (bytes) of the object. Unlike Go's JSON package, this function does not HTML-escape texts, but, one can use html_escape function if needed. indent(b string/bytes) => bytes : Returns an indented form of input JSON bytes string. html_escape(b string/bytes) => bytes : Return an HTML-safe form of input JSON bytes string. Examples json := import(\"json\") encoded := json.encode({a: 1, b: [2, 3, 4]}) // JSON-encoded bytes string indentded := json.indent(encoded) // indented form html_safe := json.html_escape(encoded) // HTML escaped form decoded := json.decode(encoded) // {a: 1, b: [2, 3, 4]}","title":"Stdlib json"},{"location":"pages/stdlib-json/#json-module-documentation","text":"The json module provides functionalities for playing with json!","title":"JSON Module Documentation"},{"location":"pages/stdlib-json/#functions","text":"decode(b string/bytes) => object : Parses the JSON string and returns an object. encode(o object) => bytes : Returns the JSON string (bytes) of the object. Unlike Go's JSON package, this function does not HTML-escape texts, but, one can use html_escape function if needed. indent(b string/bytes) => bytes : Returns an indented form of input JSON bytes string. html_escape(b string/bytes) => bytes : Return an HTML-safe form of input JSON bytes string.","title":"Functions"},{"location":"pages/stdlib-json/#examples","text":"json := import(\"json\") encoded := json.encode({a: 1, b: [2, 3, 4]}) // JSON-encoded bytes string indentded := json.indent(encoded) // indented form html_safe := json.html_escape(encoded) // HTML escaped form decoded := json.decode(encoded) // {a: 1, b: [2, 3, 4]}","title":"Examples"},{"location":"pages/stdlib-math/","text":"math Module The math module provides mathematical functions and constants for performing various calculations. Constants e : Euler's number (approximately 2.71828). pi : The mathematical constant pi (approximately 3.14159). phi : The golden ratio (approximately 1.61803). sqrt2 : The square root of 2 (approximately 1.41421). sqrtE : The square root of Euler's number. sqrtPi : The square root of pi. sqrtPhi : The square root of the golden ratio. ln2 : The natural logarithm of 2. log2E : The base-2 logarithm of Euler's number. ln10 : The natural logarithm of 10. log10E : The base-10 logarithm of Euler's number. Functions The following functions are available for performing mathematical operations: abs(x) : Returns the absolute value of x. acos(x) : Returns the arccosine of x in radians. acosh(x) : Returns the inverse hyperbolic cosine of x. asin(x) : Returns the arcsine of x in radians. asinh(x) : Returns the inverse hyperbolic sine of x. atan(x) : Returns the arctangent of x in radians. atan2(y, x) : Returns the arctangent of y/x in radians, using the signs of both parameters to determine the quadrant of the result. atanh(x) : Returns the inverse hyperbolic tangent of x. cbrt(x) : Returns the cube root of x. ceil(x) : Returns the smallest integer value greater than or equal to x. copysign(x, y) : Returns x with the sign of y. cos(x) : Returns the cosine of x (x is in radians). cosh(x) : Returns the hyperbolic cosine of x. dim(x, y) : Returns the maximum of x and y. erf(x) : Returns the error function of x. erfc(x) : Returns the complementary error function of x. exp(x) : Returns e^x, where e is Euler's number. exp2(x) : Returns 2 raised to the power of x. expm1(x) : Returns e^x - 1. floor(x) : Returns the largest integer value less than or equal to x. gamma(x) : Returns the gamma function of x. hypot(x, y) : Returns sqrt(x^2 + y^2) without intermediate overflow or underflow. ilogb(x) : Returns the exponent of the radix representation of x. inf(sign) : Returns positive infinity if sign is positive, negative infinity if sign is negative. is_inf(x, sign) : Reports whether x is positive infinity or negative infinity. is_nan(x) : Reports whether x is NaN (not a number). j0(x) : Returns the order-zero Bessel function of the first kind. j1(x) : Returns the order-one Bessel function of the first kind. jn(n, x) : Returns the nth order Bessel function of the first kind. ldexp(frac, exp) : Returns frac \u00d7 2**exp. log(x) : Returns the natural logarithm of x. log10(x) : Returns the base-10 logarithm of x. log1p(x) : Returns the natural logarithm of 1 plus x. log2(x) : Returns the base-2 logarithm of x. logb(x) : Returns the unbiased exponent of x in the IEEE 754 floating-point representation. max(x, y) : Returns the larger of x or y. min(x, y) : Returns the smaller of x or y. mod(x, y) : Returns the floating-point remainder of x/y. nan(s) : Returns an IEEE 754 \"not-a-number\" value. nextafter(x, y) : Returns the next representable float value after x towards y. pow(x, y) : Returns x**y, the base-x exponential of y. pow10(n) : Returns 10**n. remainder(x, y) : Returns the IEEE 754 floating-point remainder of x/y. signbit(x) : Reports whether x is negative or negative zero. sin(x) : Returns the sine of x (x is in radians). sinh(x) : Returns the hyperbolic sine of x. sqrt(x) : Returns the square root of x. tan(x) : Returns the tangent of x (x is in radians). tanh(x) : Returns the hyperbolic tangent of x. trunc(x) : Returns the integer value of x truncated towards zero. y0(x) : Returns the order-zero Bessel function of the second kind. y1(x) : Returns the order-one Bessel function of the second kind. yn(n, x) : Returns the nth order Bessel function of the second kind.","title":"math Module"},{"location":"pages/stdlib-math/#math-module","text":"The math module provides mathematical functions and constants for performing various calculations.","title":"math Module"},{"location":"pages/stdlib-math/#constants","text":"e : Euler's number (approximately 2.71828). pi : The mathematical constant pi (approximately 3.14159). phi : The golden ratio (approximately 1.61803). sqrt2 : The square root of 2 (approximately 1.41421). sqrtE : The square root of Euler's number. sqrtPi : The square root of pi. sqrtPhi : The square root of the golden ratio. ln2 : The natural logarithm of 2. log2E : The base-2 logarithm of Euler's number. ln10 : The natural logarithm of 10. log10E : The base-10 logarithm of Euler's number.","title":"Constants"},{"location":"pages/stdlib-math/#functions","text":"The following functions are available for performing mathematical operations: abs(x) : Returns the absolute value of x. acos(x) : Returns the arccosine of x in radians. acosh(x) : Returns the inverse hyperbolic cosine of x. asin(x) : Returns the arcsine of x in radians. asinh(x) : Returns the inverse hyperbolic sine of x. atan(x) : Returns the arctangent of x in radians. atan2(y, x) : Returns the arctangent of y/x in radians, using the signs of both parameters to determine the quadrant of the result. atanh(x) : Returns the inverse hyperbolic tangent of x. cbrt(x) : Returns the cube root of x. ceil(x) : Returns the smallest integer value greater than or equal to x. copysign(x, y) : Returns x with the sign of y. cos(x) : Returns the cosine of x (x is in radians). cosh(x) : Returns the hyperbolic cosine of x. dim(x, y) : Returns the maximum of x and y. erf(x) : Returns the error function of x. erfc(x) : Returns the complementary error function of x. exp(x) : Returns e^x, where e is Euler's number. exp2(x) : Returns 2 raised to the power of x. expm1(x) : Returns e^x - 1. floor(x) : Returns the largest integer value less than or equal to x. gamma(x) : Returns the gamma function of x. hypot(x, y) : Returns sqrt(x^2 + y^2) without intermediate overflow or underflow. ilogb(x) : Returns the exponent of the radix representation of x. inf(sign) : Returns positive infinity if sign is positive, negative infinity if sign is negative. is_inf(x, sign) : Reports whether x is positive infinity or negative infinity. is_nan(x) : Reports whether x is NaN (not a number). j0(x) : Returns the order-zero Bessel function of the first kind. j1(x) : Returns the order-one Bessel function of the first kind. jn(n, x) : Returns the nth order Bessel function of the first kind. ldexp(frac, exp) : Returns frac \u00d7 2**exp. log(x) : Returns the natural logarithm of x. log10(x) : Returns the base-10 logarithm of x. log1p(x) : Returns the natural logarithm of 1 plus x. log2(x) : Returns the base-2 logarithm of x. logb(x) : Returns the unbiased exponent of x in the IEEE 754 floating-point representation. max(x, y) : Returns the larger of x or y. min(x, y) : Returns the smaller of x or y. mod(x, y) : Returns the floating-point remainder of x/y. nan(s) : Returns an IEEE 754 \"not-a-number\" value. nextafter(x, y) : Returns the next representable float value after x towards y. pow(x, y) : Returns x**y, the base-x exponential of y. pow10(n) : Returns 10**n. remainder(x, y) : Returns the IEEE 754 floating-point remainder of x/y. signbit(x) : Reports whether x is negative or negative zero. sin(x) : Returns the sine of x (x is in radians). sinh(x) : Returns the hyperbolic sine of x. sqrt(x) : Returns the square root of x. tan(x) : Returns the tangent of x (x is in radians). tanh(x) : Returns the hyperbolic tangent of x. trunc(x) : Returns the integer value of x truncated towards zero. y0(x) : Returns the order-zero Bessel function of the second kind. y1(x) : Returns the order-one Bessel function of the second kind. yn(n, x) : Returns the nth order Bessel function of the second kind.","title":"Functions"},{"location":"pages/stdlib-net/","text":"Net Module Documentation The net module provides functionalities for network communication, including DNS lookup, TCP and UDP address resolution, and various methods for establishing network connections. Functions dnslookup(host) Performs a DNS lookup for the given host. host : The hostname to lookup. Returns an array of IP addresses associated with the given host. resolve_tcp_addr(network, address) Resolves a TCP address. network : Network type (e.g., \"tcp\", \"tcp4\", \"tcp6\"). address : The address to resolve. Returns a string representation of the resolved TCP address. resolve_udp_addr(network, address) Resolves a UDP address. network : Network type (e.g., \"udp\", \"udp4\", \"udp6\"). address : The address to resolve. Returns a string representation of the resolved UDP address. dial(network, address) Establishes a generic network connection. network : Network type (e.g., \"tcp\", \"udp\"). address : The address to connect to. Returns a connection object with methods for interaction. dialtcp(network, address) Establishes a TCP network connection. network : Network type (e.g., \"tcp\", \"tcp4\", \"tcp6\"). address : The address to connect to. Returns a connection object with methods for interaction. Connection Object Methods close() Closes the network connection. read(buffer) Reads data from the connection into the buffer. buffer : The buffer to read data into. Returns the number of bytes read. write(buffer) Writes data from the buffer to the connection. buffer : The buffer containing data to write. Returns the number of bytes written. local_addr() Returns the local address of the connection. remote_addr() Returns the remote address of the connection. set_deadline(t) Sets the read and write deadlines for the connection. t : The deadline time. set_readdeadline(t) Sets the read deadline for the connection. t : The read deadline time. set_writedeadline(t) Sets the write deadline for the connection. t : The write deadline time. Example Usage import \"net\" // DNS Lookup addresses := net.dnslookup(\"example.com\") println(addresses) // Resolve TCP Address tcp_addr := net.resolve_tcp_addr(\"tcp\", \"example.com:80\") println(tcp_addr) // Resolve UDP Address udp_addr := net.resolve_udp_addr(\"udp\", \"example.com:80\") println(udp_addr) // Dial a TCP Connection conn := net.dialtcp(\"tcp\", \"example.com:80\") if !is_error(conn) { println(\"Connected to: \", conn.remote_addr()) // Write to the connection msg := bytes(\"GET / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n\") n := conn.write(msg) println(\"Bytes written: \", n) // Read from the connection buf := bytes(1024) n = conn.read(buf) println(\"Response: \", string(buf[:n])) // Close the connection conn.close() }","title":"Stdlib net"},{"location":"pages/stdlib-net/#net-module-documentation","text":"The net module provides functionalities for network communication, including DNS lookup, TCP and UDP address resolution, and various methods for establishing network connections.","title":"Net Module Documentation"},{"location":"pages/stdlib-net/#functions","text":"","title":"Functions"},{"location":"pages/stdlib-net/#dnslookuphost","text":"Performs a DNS lookup for the given host. host : The hostname to lookup. Returns an array of IP addresses associated with the given host.","title":"dnslookup(host)"},{"location":"pages/stdlib-net/#resolve_tcp_addrnetwork-address","text":"Resolves a TCP address. network : Network type (e.g., \"tcp\", \"tcp4\", \"tcp6\"). address : The address to resolve. Returns a string representation of the resolved TCP address.","title":"resolve_tcp_addr(network, address)"},{"location":"pages/stdlib-net/#resolve_udp_addrnetwork-address","text":"Resolves a UDP address. network : Network type (e.g., \"udp\", \"udp4\", \"udp6\"). address : The address to resolve. Returns a string representation of the resolved UDP address.","title":"resolve_udp_addr(network, address)"},{"location":"pages/stdlib-net/#dialnetwork-address","text":"Establishes a generic network connection. network : Network type (e.g., \"tcp\", \"udp\"). address : The address to connect to. Returns a connection object with methods for interaction.","title":"dial(network, address)"},{"location":"pages/stdlib-net/#dialtcpnetwork-address","text":"Establishes a TCP network connection. network : Network type (e.g., \"tcp\", \"tcp4\", \"tcp6\"). address : The address to connect to. Returns a connection object with methods for interaction.","title":"dialtcp(network, address)"},{"location":"pages/stdlib-net/#connection-object-methods","text":"","title":"Connection Object Methods"},{"location":"pages/stdlib-net/#close","text":"Closes the network connection.","title":"close()"},{"location":"pages/stdlib-net/#readbuffer","text":"Reads data from the connection into the buffer. buffer : The buffer to read data into. Returns the number of bytes read.","title":"read(buffer)"},{"location":"pages/stdlib-net/#writebuffer","text":"Writes data from the buffer to the connection. buffer : The buffer containing data to write. Returns the number of bytes written.","title":"write(buffer)"},{"location":"pages/stdlib-net/#local_addr","text":"Returns the local address of the connection.","title":"local_addr()"},{"location":"pages/stdlib-net/#remote_addr","text":"Returns the remote address of the connection.","title":"remote_addr()"},{"location":"pages/stdlib-net/#set_deadlinet","text":"Sets the read and write deadlines for the connection. t : The deadline time.","title":"set_deadline(t)"},{"location":"pages/stdlib-net/#set_readdeadlinet","text":"Sets the read deadline for the connection. t : The read deadline time.","title":"set_readdeadline(t)"},{"location":"pages/stdlib-net/#set_writedeadlinet","text":"Sets the write deadline for the connection. t : The write deadline time.","title":"set_writedeadline(t)"},{"location":"pages/stdlib-net/#example-usage","text":"import \"net\" // DNS Lookup addresses := net.dnslookup(\"example.com\") println(addresses) // Resolve TCP Address tcp_addr := net.resolve_tcp_addr(\"tcp\", \"example.com:80\") println(tcp_addr) // Resolve UDP Address udp_addr := net.resolve_udp_addr(\"udp\", \"example.com:80\") println(udp_addr) // Dial a TCP Connection conn := net.dialtcp(\"tcp\", \"example.com:80\") if !is_error(conn) { println(\"Connected to: \", conn.remote_addr()) // Write to the connection msg := bytes(\"GET / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n\") n := conn.write(msg) println(\"Bytes written: \", n) // Read from the connection buf := bytes(1024) n = conn.read(buf) println(\"Response: \", string(buf[:n])) // Close the connection conn.close() }","title":"Example Usage"},{"location":"pages/stdlib-os/","text":"OS Module Documentation The os module provides functions for operating system functionality. Constants o_rdonly o_wronly o_rdwr o_append o_create o_excl o_sync o_trunc mode_dir mode_append mode_exclusive mode_temporary mode_symlink mode_device mode_named_pipe mode_socket mode_setuid mode_setgui mode_char_device mode_sticky mode_irregular mode_type mode_perm seek_set seek_cur seek_end path_separator path_list_separator dev_null Functions args() => [string] : returns command-line arguments, starting with the program name. chdir(dir string) => error : changes the current working directory to the named directory. chmod(name string, mode int) => error : changes the mode of the named file to mode. chown(name string, uid int, gid int) => error : changes the numeric uid and gid of the named file. clearenv() : deletes all environment variables. environ() => [string] : returns a copy of strings representing the environment. exit(code int) : causes the current program to exit with the given status code. expand_env(s string) => string : replaces ${var} or $var in the string according to the values of the current environment variables. getegid() => int : returns the numeric effective group id of the caller. getenv(key string) => string : retrieves the value of the environment variable named by the key. geteuid() => int : returns the numeric effective user id of the caller. getgid() => int : returns the numeric group id of the caller. getgroups() => [int]/error : returns a list of the numeric ids of groups that the caller belongs to. getpagesize() => int : returns the underlying system's memory page size. getpid() => int : returns the process id of the caller. getppid() => int : returns the process id of the caller's parent. getuid() => int : returns the numeric user id of the caller. getwd() => string/error : returns a rooted path name corresponding to the current directory. hostname() => string/error : returns the host name reported by the kernel. lchown(name string, uid int, gid int) => error : changes the numeric uid and gid of the named file. link(oldname string, newname string) => error : creates newname as a hard link to the oldname file. lookup_env(key string) => string/false : retrieves the value of the environment variable named by the key. mkdir(name string, perm int) => error : creates a new directory with the specified name and permission bits (before umask). mkdir_all(name string, perm int) => error : creates a directory named path, along with any necessary parents, and returns null, or else returns an error. read_file(name string) => bytes/error : reads the contents of a file into a byte array readlink(name string) => string/error : returns the destination of the named symbolic link. remove(name string) => error : removes the named file or (empty) directory. remove_all(name string) => error : removes path and any children it contains. rename(oldpath string, newpath string) => error : renames (moves) oldpath to newpath. setenv(key string, value string) => error : sets the value of the environment variable named by the key. stat(filename string) => FileInfo/error : returns a file info structure describing the file symlink(oldname string newname string) => error : creates newname as a symbolic link to oldname. temp_dir() => string : returns the default directory to use for temporary files. truncate(name string, size int) => error : changes the size of the named file. unsetenv(key string) => error : unsets a single environment variable. create(name string) => File/error : creates the named file with mode 0666 (before umask), truncating it if it already exists. open(name string) => File/error : opens the named file for reading. If successful, methods on the returned file can be used for reading; the associated file descriptor has mode O_RDONLY. open_file(name string, flag int, perm int) => File/error : is the generalized open call; most users will use Open or Create instead. It opens the named file with specified flag (O_RDONLY etc.) and perm (before umask), if applicable. find_process(pid int) => Process/error : looks for a running process by its pid. start_process(name string, argv [string], dir string, env [string]) => Process/error : starts a new process with the program, arguments and attributes specified by name, argv and attr. The argv slice will become os.Args in the new process, so it normally starts with the program name. exec_look_path(file string) => string/error : searches for an executable named file in the directories named by the PATH environment variable. exec(name string, args...) => Command/error : returns the Command to execute the named program with the given arguments. File file := os.create(\"myfile\") file.write_string(\"some data\") file.close() chdir() => true/error : changes the current working directory to the file, chown(uid int, gid int) => true/error : changes the numeric uid and gid of the named file. close() => error : closes the File, rendering it unusable for I/O. name() => string : returns the name of the file as presented to Open. readdirnames(n int) => [string]/error : reads and returns a slice of names from the directory. sync() => error : commits the current contents of the file to stable storage. write(bytes) => int/error : writes len(b) bytes to the File. write_string(string) => int/error : is like 'write', but writes the contents of string s rather than a slice of bytes. read(bytes) => int/error : reads up to len(b) bytes from the File. stat() => FileInfo/error : returns a file info structure describing the file chmod(mode int) => error : changes the mode of the file to mode. seek(offset int, whence int) => int/error : sets the offset for the next Read or Write on file to offset, interpreted according to whence: 0 means relative to the origin of the file, 1 means relative to the current offset, and 2 means relative to the end. Process proc := start_process(\"app\", [\"arg1\", \"arg2\"], \"dir\", []) proc.wait() kill() => error : causes the Process to exit immediately. release() => error : releases any resources associated with the process, rendering it unusable in the future. signal(signal int) => error : sends a signal to the Process. wait() => ProcessState/error : waits for the Process to exit, and then returns a ProcessState describing its status and an error, if any. ProcessState proc := start_process(\"app\", [\"arg1\", \"arg2\"], \"dir\", []) stat := proc.wait() pid := stat.pid() exited() => bool : reports whether the program has exited. pid() => int : returns the process id of the exited process. string() => string : returns a string representation of the process. success() => bool : reports whether the program exited successfully, such as with exit status 0 on Unix. cmd := exec.command(\"echo\", [\"foo\", \"bar\"]) output := cmd.output() FileInfo name : name of the file the info describes mtime : time the file was last modified size : file size in bytes mode : file permissions as in int, comparable to octal permissions directory : boolean indicating if the file is a directory Command combined_output() => bytes/error : runs the command and returns its combined standard output and standard error. output() => bytes/error : runs the command and returns its standard output. run() => error : starts the specified command and waits for it to complete. start() => error : starts the specified command but does not wait for it to complete. wait() => error : waits for the command to exit and waits for any copying to stdin or copying from stdout or stderr to complete. set_path(path string) : sets the path of the command to run. set_dir(dir string) : sets the working directory of the process. set_env(env [string]) : sets the environment of the process. process() => Process : returns the underlying process, once started.","title":"Stdlib os"},{"location":"pages/stdlib-os/#os-module-documentation","text":"The os module provides functions for operating system functionality.","title":"OS Module Documentation"},{"location":"pages/stdlib-os/#constants","text":"o_rdonly o_wronly o_rdwr o_append o_create o_excl o_sync o_trunc mode_dir mode_append mode_exclusive mode_temporary mode_symlink mode_device mode_named_pipe mode_socket mode_setuid mode_setgui mode_char_device mode_sticky mode_irregular mode_type mode_perm seek_set seek_cur seek_end path_separator path_list_separator dev_null","title":"Constants"},{"location":"pages/stdlib-os/#functions","text":"args() => [string] : returns command-line arguments, starting with the program name. chdir(dir string) => error : changes the current working directory to the named directory. chmod(name string, mode int) => error : changes the mode of the named file to mode. chown(name string, uid int, gid int) => error : changes the numeric uid and gid of the named file. clearenv() : deletes all environment variables. environ() => [string] : returns a copy of strings representing the environment. exit(code int) : causes the current program to exit with the given status code. expand_env(s string) => string : replaces ${var} or $var in the string according to the values of the current environment variables. getegid() => int : returns the numeric effective group id of the caller. getenv(key string) => string : retrieves the value of the environment variable named by the key. geteuid() => int : returns the numeric effective user id of the caller. getgid() => int : returns the numeric group id of the caller. getgroups() => [int]/error : returns a list of the numeric ids of groups that the caller belongs to. getpagesize() => int : returns the underlying system's memory page size. getpid() => int : returns the process id of the caller. getppid() => int : returns the process id of the caller's parent. getuid() => int : returns the numeric user id of the caller. getwd() => string/error : returns a rooted path name corresponding to the current directory. hostname() => string/error : returns the host name reported by the kernel. lchown(name string, uid int, gid int) => error : changes the numeric uid and gid of the named file. link(oldname string, newname string) => error : creates newname as a hard link to the oldname file. lookup_env(key string) => string/false : retrieves the value of the environment variable named by the key. mkdir(name string, perm int) => error : creates a new directory with the specified name and permission bits (before umask). mkdir_all(name string, perm int) => error : creates a directory named path, along with any necessary parents, and returns null, or else returns an error. read_file(name string) => bytes/error : reads the contents of a file into a byte array readlink(name string) => string/error : returns the destination of the named symbolic link. remove(name string) => error : removes the named file or (empty) directory. remove_all(name string) => error : removes path and any children it contains. rename(oldpath string, newpath string) => error : renames (moves) oldpath to newpath. setenv(key string, value string) => error : sets the value of the environment variable named by the key. stat(filename string) => FileInfo/error : returns a file info structure describing the file symlink(oldname string newname string) => error : creates newname as a symbolic link to oldname. temp_dir() => string : returns the default directory to use for temporary files. truncate(name string, size int) => error : changes the size of the named file. unsetenv(key string) => error : unsets a single environment variable. create(name string) => File/error : creates the named file with mode 0666 (before umask), truncating it if it already exists. open(name string) => File/error : opens the named file for reading. If successful, methods on the returned file can be used for reading; the associated file descriptor has mode O_RDONLY. open_file(name string, flag int, perm int) => File/error : is the generalized open call; most users will use Open or Create instead. It opens the named file with specified flag (O_RDONLY etc.) and perm (before umask), if applicable. find_process(pid int) => Process/error : looks for a running process by its pid. start_process(name string, argv [string], dir string, env [string]) => Process/error : starts a new process with the program, arguments and attributes specified by name, argv and attr. The argv slice will become os.Args in the new process, so it normally starts with the program name. exec_look_path(file string) => string/error : searches for an executable named file in the directories named by the PATH environment variable. exec(name string, args...) => Command/error : returns the Command to execute the named program with the given arguments.","title":"Functions"},{"location":"pages/stdlib-os/#file","text":"file := os.create(\"myfile\") file.write_string(\"some data\") file.close() chdir() => true/error : changes the current working directory to the file, chown(uid int, gid int) => true/error : changes the numeric uid and gid of the named file. close() => error : closes the File, rendering it unusable for I/O. name() => string : returns the name of the file as presented to Open. readdirnames(n int) => [string]/error : reads and returns a slice of names from the directory. sync() => error : commits the current contents of the file to stable storage. write(bytes) => int/error : writes len(b) bytes to the File. write_string(string) => int/error : is like 'write', but writes the contents of string s rather than a slice of bytes. read(bytes) => int/error : reads up to len(b) bytes from the File. stat() => FileInfo/error : returns a file info structure describing the file chmod(mode int) => error : changes the mode of the file to mode. seek(offset int, whence int) => int/error : sets the offset for the next Read or Write on file to offset, interpreted according to whence: 0 means relative to the origin of the file, 1 means relative to the current offset, and 2 means relative to the end.","title":"File"},{"location":"pages/stdlib-os/#process","text":"proc := start_process(\"app\", [\"arg1\", \"arg2\"], \"dir\", []) proc.wait() kill() => error : causes the Process to exit immediately. release() => error : releases any resources associated with the process, rendering it unusable in the future. signal(signal int) => error : sends a signal to the Process. wait() => ProcessState/error : waits for the Process to exit, and then returns a ProcessState describing its status and an error, if any.","title":"Process"},{"location":"pages/stdlib-os/#processstate","text":"proc := start_process(\"app\", [\"arg1\", \"arg2\"], \"dir\", []) stat := proc.wait() pid := stat.pid() exited() => bool : reports whether the program has exited. pid() => int : returns the process id of the exited process. string() => string : returns a string representation of the process. success() => bool : reports whether the program exited successfully, such as with exit status 0 on Unix. cmd := exec.command(\"echo\", [\"foo\", \"bar\"]) output := cmd.output()","title":"ProcessState"},{"location":"pages/stdlib-os/#fileinfo","text":"name : name of the file the info describes mtime : time the file was last modified size : file size in bytes mode : file permissions as in int, comparable to octal permissions directory : boolean indicating if the file is a directory","title":"FileInfo"},{"location":"pages/stdlib-os/#command","text":"combined_output() => bytes/error : runs the command and returns its combined standard output and standard error. output() => bytes/error : runs the command and returns its standard output. run() => error : starts the specified command and waits for it to complete. start() => error : starts the specified command but does not wait for it to complete. wait() => error : waits for the command to exit and waits for any copying to stdin or copying from stdout or stderr to complete. set_path(path string) : sets the path of the command to run. set_dir(dir string) : sets the working directory of the process. set_env(env [string]) : sets the environment of the process. process() => Process : returns the underlying process, once started.","title":"Command"},{"location":"pages/stdlib-path/","text":"Path Module Documentation The path module provides functions for manipulating file paths and performing operations related to file paths. Functions join(path1, path2, ...) Joins any number of path elements into a single path, separating them with the operating system-specific separator. path1, path2, ... : Multiple string objects representing the path elements to be joined. Returns a string containing the joined path. base(path) Returns the last element of the path, typically the file or directory name. path : A string representing the path. Returns a string containing the base name. ext(path) Returns the file extension of the given path. path : A string representing the path. Returns a string containing the file extension. clean(path) Returns the cleaned version of the path. path : A string representing the path to be cleaned. Returns a string containing the cleaned path. dir(path) Returns the directory part of the given path. path : A string representing the path. Returns a string containing the directory part. isabs(path) Checks whether the given path is absolute. path : A string representing the path. Returns a bool indicating whether the path is absolute. abs(path) Returns the absolute path of the given path. path : A string representing the path. Returns a string containing the absolute path. to_slash(path) Converts the path to use forward slashes ('/') as the separator. path : A string representing the path. Returns a string with forward slashes. from_slash(path) Converts the path to use the native operating system separator. path : A string representing the path. Returns a string with the native separator. vol(path) Returns the volume name of the given path. path : A string representing the path. Returns a string containing the volume name. walklist(root) Walks the file tree rooted at the specified root path and returns a list of all visited files and directories. root : A string representing the root directory to start the walk. Returns a array containing a list of paths visited during the walk. splitlist(paths) Splits the input string containing a list of paths into individual paths. paths : A string representing the list of paths. Returns a array containing individual path elements. Example Usage import \"path\" // Join path elements joined_path := path.join(\"folder\", \"hello.txt\") println(joined_path)","title":"Stdlib path"},{"location":"pages/stdlib-path/#path-module-documentation","text":"The path module provides functions for manipulating file paths and performing operations related to file paths.","title":"Path Module Documentation"},{"location":"pages/stdlib-path/#functions","text":"","title":"Functions"},{"location":"pages/stdlib-path/#joinpath1-path2","text":"Joins any number of path elements into a single path, separating them with the operating system-specific separator. path1, path2, ... : Multiple string objects representing the path elements to be joined. Returns a string containing the joined path.","title":"join(path1, path2, ...)"},{"location":"pages/stdlib-path/#basepath","text":"Returns the last element of the path, typically the file or directory name. path : A string representing the path. Returns a string containing the base name.","title":"base(path)"},{"location":"pages/stdlib-path/#extpath","text":"Returns the file extension of the given path. path : A string representing the path. Returns a string containing the file extension.","title":"ext(path)"},{"location":"pages/stdlib-path/#cleanpath","text":"Returns the cleaned version of the path. path : A string representing the path to be cleaned. Returns a string containing the cleaned path.","title":"clean(path)"},{"location":"pages/stdlib-path/#dirpath","text":"Returns the directory part of the given path. path : A string representing the path. Returns a string containing the directory part.","title":"dir(path)"},{"location":"pages/stdlib-path/#isabspath","text":"Checks whether the given path is absolute. path : A string representing the path. Returns a bool indicating whether the path is absolute.","title":"isabs(path)"},{"location":"pages/stdlib-path/#abspath","text":"Returns the absolute path of the given path. path : A string representing the path. Returns a string containing the absolute path.","title":"abs(path)"},{"location":"pages/stdlib-path/#to_slashpath","text":"Converts the path to use forward slashes ('/') as the separator. path : A string representing the path. Returns a string with forward slashes.","title":"to_slash(path)"},{"location":"pages/stdlib-path/#from_slashpath","text":"Converts the path to use the native operating system separator. path : A string representing the path. Returns a string with the native separator.","title":"from_slash(path)"},{"location":"pages/stdlib-path/#volpath","text":"Returns the volume name of the given path. path : A string representing the path. Returns a string containing the volume name.","title":"vol(path)"},{"location":"pages/stdlib-path/#walklistroot","text":"Walks the file tree rooted at the specified root path and returns a list of all visited files and directories. root : A string representing the root directory to start the walk. Returns a array containing a list of paths visited during the walk.","title":"walklist(root)"},{"location":"pages/stdlib-path/#splitlistpaths","text":"Splits the input string containing a list of paths into individual paths. paths : A string representing the list of paths. Returns a array containing individual path elements.","title":"splitlist(paths)"},{"location":"pages/stdlib-path/#example-usage","text":"import \"path\" // Join path elements joined_path := path.join(\"folder\", \"hello.txt\") println(joined_path)","title":"Example Usage"},{"location":"pages/stdlib-rand/","text":"Rand Module Documentation The rand module provides functions for generating random numbers and sequences, seeding the random number generator, and creating custom random number generators. Functions seed(seed int) : uses the provided seed value to initialize the default Source to a deterministic state. exp_float() => float : returns an exponentially distributed float64 in the range (0, +math.MaxFloat64] with an exponential distribution whose rate parameter (lambda) is 1 and whose mean is 1/lambda (1) from the default Source. float() => float : returns, as a float64, a pseudo-random number in [0.0,1.0) from the default Source. int() => int : returns a non-negative pseudo-random 63-bit integer as an int64 from the default Source. intn(n int) => int : returns, as an int64, a non-negative pseudo-random number in [0,n) from the default Source. It panics if n <= 0. norm_float) => float : returns a normally distributed float64 in the range [-math.MaxFloat64, +math.MaxFloat64] with standard normal distribution (mean = 0, stddev = 1) from the default Source. perm(n int) => [int] : returns, as a slice of n ints, a pseudo-random permutation of the integers [0,n) from the default Source. read(p bytes) => int/error : generates len(p) random bytes from the default Source and writes them into p. It always returns len(p) and a null error. rand(src_seed int) => Rand : returns a new Rand that uses random values from src to generate other random values. Rand seed(seed int) : uses the provided seed value to initialize the default Source to a deterministic state. exp_float() => float : returns an exponentially distributed float64 in the range (0, +math.MaxFloat64] with an exponential distribution whose rate parameter (lambda) is 1 and whose mean is 1/lambda (1) from the default Source. float() => float : returns, as a float64, a pseudo-random number in [0.0,1.0) from the default Source. int() => int : returns a non-negative pseudo-random 63-bit integer as an int64 from the default Source. intn(n int) => int : returns, as an int64, a non-negative pseudo-random number in [0,n) from the default Source. It panics if n <= 0. norm_float) => float : returns a normally distributed float64 in the range [-math.MaxFloat64, +math.MaxFloat64] with standard normal distribution (mean = 0, stddev = 1) from the default Source. perm(n int) => [int] : returns, as a slice of n ints, a pseudo-random permutation of the integers [0,n) from the default Source. read(p bytes) => int/error : generates len(p) random bytes from the default Source and writes them into p. It always returns len(p) and a null error.","title":"Stdlib rand"},{"location":"pages/stdlib-rand/#rand-module-documentation","text":"The rand module provides functions for generating random numbers and sequences, seeding the random number generator, and creating custom random number generators.","title":"Rand Module Documentation"},{"location":"pages/stdlib-rand/#functions","text":"seed(seed int) : uses the provided seed value to initialize the default Source to a deterministic state. exp_float() => float : returns an exponentially distributed float64 in the range (0, +math.MaxFloat64] with an exponential distribution whose rate parameter (lambda) is 1 and whose mean is 1/lambda (1) from the default Source. float() => float : returns, as a float64, a pseudo-random number in [0.0,1.0) from the default Source. int() => int : returns a non-negative pseudo-random 63-bit integer as an int64 from the default Source. intn(n int) => int : returns, as an int64, a non-negative pseudo-random number in [0,n) from the default Source. It panics if n <= 0. norm_float) => float : returns a normally distributed float64 in the range [-math.MaxFloat64, +math.MaxFloat64] with standard normal distribution (mean = 0, stddev = 1) from the default Source. perm(n int) => [int] : returns, as a slice of n ints, a pseudo-random permutation of the integers [0,n) from the default Source. read(p bytes) => int/error : generates len(p) random bytes from the default Source and writes them into p. It always returns len(p) and a null error. rand(src_seed int) => Rand : returns a new Rand that uses random values from src to generate other random values.","title":"Functions"},{"location":"pages/stdlib-rand/#rand","text":"seed(seed int) : uses the provided seed value to initialize the default Source to a deterministic state. exp_float() => float : returns an exponentially distributed float64 in the range (0, +math.MaxFloat64] with an exponential distribution whose rate parameter (lambda) is 1 and whose mean is 1/lambda (1) from the default Source. float() => float : returns, as a float64, a pseudo-random number in [0.0,1.0) from the default Source. int() => int : returns a non-negative pseudo-random 63-bit integer as an int64 from the default Source. intn(n int) => int : returns, as an int64, a non-negative pseudo-random number in [0,n) from the default Source. It panics if n <= 0. norm_float) => float : returns a normally distributed float64 in the range [-math.MaxFloat64, +math.MaxFloat64] with standard normal distribution (mean = 0, stddev = 1) from the default Source. perm(n int) => [int] : returns, as a slice of n ints, a pseudo-random permutation of the integers [0,n) from the default Source. read(p bytes) => int/error : generates len(p) random bytes from the default Source and writes them into p. It always returns len(p) and a null error.","title":"Rand"},{"location":"pages/stdlib-strings/","text":"strings Module Documentation The strings module provides functionalities for manipulating strings. Functions re_match(pattern string, text string) => bool/error : reports whether the string s contains any match of the regular expression pattern. re_find(pattern string, text string, count int) => [[{text: string, begin: int, end: int}]]/null : returns an array holding all matches, each of which is an array of map object that contains matching text, begin and end (exclusive) index. re_replace(pattern string, text string, repl string) => string/error : returns a copy of src, replacing matches of the pattern with the replacement string repl. re_split(pattern string, text string, count int) => [string]/error : slices s into substrings separated by the expression and returns a slice of the substrings between those expression matches. re_compile(pattern string) => Regexp/error : parses a regular expression and returns, if successful, a Regexp object that can be used to match against text. compare(a string, b string) => int : returns an integer comparing two strings lexicographically. The result will be 0 if a==b, -1 if a < b, and +1 if a > b. contains(s string, substr string) => bool : reports whether substr is within s. contains_any(s string, chars string) => bool : reports whether any Unicode code points in chars are within s. count(s string, substr string) => int : counts the number of non-overlapping instances of substr in s. equal_fold(s string, t string) => bool : reports whether s and t, interpreted as UTF-8 strings, fields(s string) => [string] : splits the string s around each instance of one or more consecutive white space characters, as defined by unicode.IsSpace, returning a slice of substrings of s or an empty slice if s contains only white space. has_prefix(s string, prefix string) => bool : tests whether the string s begins with prefix. has_suffix(s string, suffix string) => bool : tests whether the string s ends with suffix. index(s string, substr string) => int : returns the index of the first instance of substr in s, or -1 if substr is not present in s. index_any(s string, chars string) => int : returns the index of the first instance of any Unicode code point from chars in s, or -1 if no Unicode code point from chars is present in s. join(arr string, sep string) => string : concatenates the elements of a to create a single string. The separator string sep is placed between elements in the resulting string. last_index(s string, substr string) => int : returns the index of the last instance of substr in s, or -1 if substr is not present in s. last_index_any(s string, chars string) => int : returns the index of the last instance of any Unicode code point from chars in s, or -1 if no Unicode code point from chars is present in s. repeat(s string, count int) => string : returns a new string consisting of count copies of the string s. replace(s string, old string, new string, n int) => string : returns a copy of the string s with the first n non-overlapping instances of old replaced by new. substr(s string, lower int, upper int) => string => string : returns a substring of the string s specified by the lower and upper parameters. split(s string, sep string) => [string] : slices s into all substrings separated by sep and returns a slice of the substrings between those separators. split_after(s string, sep string) => [string] : slices s into all substrings after each instance of sep and returns a slice of those substrings. split_after_n(s string, sep string, n int) => [string] : slices s into substrings after each instance of sep and returns a slice of those substrings. split_n(s string, sep string, n int) => [string] : slices s into substrings separated by sep and returns a slice of the substrings between those separators. title(s string) => string : returns a copy of the string s with all Unicode letters that begin words mapped to their title case. to_lower(s string) => string : returns a copy of the string s with all Unicode letters mapped to their lower case. to_title(s string) => string : returns a copy of the string s with all Unicode letters mapped to their title case. to_upper(s string) => string : returns a copy of the string s with all Unicode letters mapped to their upper case. pad_left(s string, pad_len int, pad_with string) => string : returns a copy of the string s padded on the left with the contents of the string pad_with to length pad_len. If pad_with is not specified, white space is used as the default padding. pad_right(s string, pad_len int, pad_with string) => string : returns a copy of the string s padded on the right with the contents of the string pad_with to length pad_len. If pad_with is not specified, white space is used as the default padding. trim(s string, cutset string) => string : returns a slice of the string s with all leading and trailing Unicode code points contained in cutset removed. trim_left(s string, cutset string) => string : returns a slice of the string s with all leading Unicode code points contained in cutset removed. trim_prefix(s string, prefix string) => string : returns s without the provided leading prefix string. trim_right(s string, cutset string) => string : returns a slice of the string s, with all trailing Unicode code points contained in cutset removed. trim_space(s string) => string : returns a slice of the string s, with all leading and trailing white space removed, as defined by Unicode. trim_suffix(s string, suffix string) => string : returns s without the provided trailing suffix string. atoi(str string) => int/error : returns the result of ParseInt(s, 10, 0) converted to type int. format_bool(b bool) => string : returns \"true\" or \"false\" according to the value of b. format_float(f float, fmt string, prec int, bits int) => string : converts the floating-point number f to a string, according to the format fmt and precision prec. format_int(i int, base int) => string : returns the string representation of i in the given base, for 2 <= base <= 36. The result uses the lower-case letters 'a' to 'z' for digit values >= 10. itoa(i int) => string : is shorthand for format_int(i, 10). parse_bool(s string) => bool/error : returns the boolean value represented by the string. It accepts 1, t, T, TRUE, true, True, 0, f, F, FALSE, false, False. Any other value returns an error. parse_float(s string, bits int) => float/error : converts the string s to a floating-point number with the precision specified by bitSize: 32 for float32, or 64 for float64. When bitSize=32, the result still has type float64, but it will be convertible to float32 without changing its value. parse_int(s string, base int, bits int) => int/error : interprets a string s in the given base (0, 2 to 36) and bit size (0 to 64) and returns the corresponding value i. quote(s string) => string : returns a double-quoted Go string literal representing s. The returned string uses Go escape sequences (\\t, \\n, \\xFF, \\u0100) for control characters and non-printable characters as defined by IsPrint. unquote(s string) => string/error : interprets s as a single-quoted, double-quoted, or backquoted Go string literal, returning the string value that s quotes. (If s is single-quoted, it would be a Go character literal; Unquote returns the corresponding one-character string.) Regexp match(text string) => bool : reports whether the string s contains any match of the regular expression pattern. find(text string, count int) => [[{text: string, begin: int, end: int}]]/null : returns an array holding all matches, each of which is an array of map object that contains matching text, begin and end (exclusive) index. replace(src string, repl string) => string : returns a copy of src, replacing matches of the pattern with the replacement string repl. split(text string, count int) => [string] : slices s into substrings separated by the expression and returns a slice of the substrings between those expression matches.","title":"Stdlib strings"},{"location":"pages/stdlib-strings/#strings-module-documentation","text":"The strings module provides functionalities for manipulating strings.","title":"strings Module Documentation"},{"location":"pages/stdlib-strings/#functions","text":"re_match(pattern string, text string) => bool/error : reports whether the string s contains any match of the regular expression pattern. re_find(pattern string, text string, count int) => [[{text: string, begin: int, end: int}]]/null : returns an array holding all matches, each of which is an array of map object that contains matching text, begin and end (exclusive) index. re_replace(pattern string, text string, repl string) => string/error : returns a copy of src, replacing matches of the pattern with the replacement string repl. re_split(pattern string, text string, count int) => [string]/error : slices s into substrings separated by the expression and returns a slice of the substrings between those expression matches. re_compile(pattern string) => Regexp/error : parses a regular expression and returns, if successful, a Regexp object that can be used to match against text. compare(a string, b string) => int : returns an integer comparing two strings lexicographically. The result will be 0 if a==b, -1 if a < b, and +1 if a > b. contains(s string, substr string) => bool : reports whether substr is within s. contains_any(s string, chars string) => bool : reports whether any Unicode code points in chars are within s. count(s string, substr string) => int : counts the number of non-overlapping instances of substr in s. equal_fold(s string, t string) => bool : reports whether s and t, interpreted as UTF-8 strings, fields(s string) => [string] : splits the string s around each instance of one or more consecutive white space characters, as defined by unicode.IsSpace, returning a slice of substrings of s or an empty slice if s contains only white space. has_prefix(s string, prefix string) => bool : tests whether the string s begins with prefix. has_suffix(s string, suffix string) => bool : tests whether the string s ends with suffix. index(s string, substr string) => int : returns the index of the first instance of substr in s, or -1 if substr is not present in s. index_any(s string, chars string) => int : returns the index of the first instance of any Unicode code point from chars in s, or -1 if no Unicode code point from chars is present in s. join(arr string, sep string) => string : concatenates the elements of a to create a single string. The separator string sep is placed between elements in the resulting string. last_index(s string, substr string) => int : returns the index of the last instance of substr in s, or -1 if substr is not present in s. last_index_any(s string, chars string) => int : returns the index of the last instance of any Unicode code point from chars in s, or -1 if no Unicode code point from chars is present in s. repeat(s string, count int) => string : returns a new string consisting of count copies of the string s. replace(s string, old string, new string, n int) => string : returns a copy of the string s with the first n non-overlapping instances of old replaced by new. substr(s string, lower int, upper int) => string => string : returns a substring of the string s specified by the lower and upper parameters. split(s string, sep string) => [string] : slices s into all substrings separated by sep and returns a slice of the substrings between those separators. split_after(s string, sep string) => [string] : slices s into all substrings after each instance of sep and returns a slice of those substrings. split_after_n(s string, sep string, n int) => [string] : slices s into substrings after each instance of sep and returns a slice of those substrings. split_n(s string, sep string, n int) => [string] : slices s into substrings separated by sep and returns a slice of the substrings between those separators. title(s string) => string : returns a copy of the string s with all Unicode letters that begin words mapped to their title case. to_lower(s string) => string : returns a copy of the string s with all Unicode letters mapped to their lower case. to_title(s string) => string : returns a copy of the string s with all Unicode letters mapped to their title case. to_upper(s string) => string : returns a copy of the string s with all Unicode letters mapped to their upper case. pad_left(s string, pad_len int, pad_with string) => string : returns a copy of the string s padded on the left with the contents of the string pad_with to length pad_len. If pad_with is not specified, white space is used as the default padding. pad_right(s string, pad_len int, pad_with string) => string : returns a copy of the string s padded on the right with the contents of the string pad_with to length pad_len. If pad_with is not specified, white space is used as the default padding. trim(s string, cutset string) => string : returns a slice of the string s with all leading and trailing Unicode code points contained in cutset removed. trim_left(s string, cutset string) => string : returns a slice of the string s with all leading Unicode code points contained in cutset removed. trim_prefix(s string, prefix string) => string : returns s without the provided leading prefix string. trim_right(s string, cutset string) => string : returns a slice of the string s, with all trailing Unicode code points contained in cutset removed. trim_space(s string) => string : returns a slice of the string s, with all leading and trailing white space removed, as defined by Unicode. trim_suffix(s string, suffix string) => string : returns s without the provided trailing suffix string. atoi(str string) => int/error : returns the result of ParseInt(s, 10, 0) converted to type int. format_bool(b bool) => string : returns \"true\" or \"false\" according to the value of b. format_float(f float, fmt string, prec int, bits int) => string : converts the floating-point number f to a string, according to the format fmt and precision prec. format_int(i int, base int) => string : returns the string representation of i in the given base, for 2 <= base <= 36. The result uses the lower-case letters 'a' to 'z' for digit values >= 10. itoa(i int) => string : is shorthand for format_int(i, 10). parse_bool(s string) => bool/error : returns the boolean value represented by the string. It accepts 1, t, T, TRUE, true, True, 0, f, F, FALSE, false, False. Any other value returns an error. parse_float(s string, bits int) => float/error : converts the string s to a floating-point number with the precision specified by bitSize: 32 for float32, or 64 for float64. When bitSize=32, the result still has type float64, but it will be convertible to float32 without changing its value. parse_int(s string, base int, bits int) => int/error : interprets a string s in the given base (0, 2 to 36) and bit size (0 to 64) and returns the corresponding value i. quote(s string) => string : returns a double-quoted Go string literal representing s. The returned string uses Go escape sequences (\\t, \\n, \\xFF, \\u0100) for control characters and non-printable characters as defined by IsPrint. unquote(s string) => string/error : interprets s as a single-quoted, double-quoted, or backquoted Go string literal, returning the string value that s quotes. (If s is single-quoted, it would be a Go character literal; Unquote returns the corresponding one-character string.)","title":"Functions"},{"location":"pages/stdlib-strings/#regexp","text":"match(text string) => bool : reports whether the string s contains any match of the regular expression pattern. find(text string, count int) => [[{text: string, begin: int, end: int}]]/null : returns an array holding all matches, each of which is an array of map object that contains matching text, begin and end (exclusive) index. replace(src string, repl string) => string : returns a copy of src, replacing matches of the pattern with the replacement string repl. split(text string, count int) => [string] : slices s into substrings separated by the expression and returns a slice of the substrings between those expression matches.","title":"Regexp"},{"location":"pages/stdlib-tar/","text":"Tar Module Documentation The tar module provides functions for creating and reading TAR archives. Functions writer() : Returns a writer object for creating a new TAR archive. The writer object provides methods for adding files and closing the TAR archive. create(filename, content) : Creates a new file entry in the TAR archive with the specified filename and content. bytes() : Returns the byte representation of the created TAR archive. close() : Closes the TAR archive writer. reader(data) : Returns an array containing information about each file in the TAR archive. Each element in the array represents a file and contains the following attributes: name : Name of the file. mode : Permission mode of the file. size : Size of the file. data : Content of the file. Example Usage import \"tar\" import \"io\" // Create a new TAR archive writer := tar.writer() writer.create(\"hello.txt\", \"hello world\") writer.close() io.writefile(\"hello.tar\", writer.bytes()) // Reading TAR reader := tar.reader(io.readfile(\"hello.tar\"))","title":"Stdlib tar"},{"location":"pages/stdlib-tar/#tar-module-documentation","text":"The tar module provides functions for creating and reading TAR archives.","title":"Tar Module Documentation"},{"location":"pages/stdlib-tar/#functions","text":"writer() : Returns a writer object for creating a new TAR archive. The writer object provides methods for adding files and closing the TAR archive. create(filename, content) : Creates a new file entry in the TAR archive with the specified filename and content. bytes() : Returns the byte representation of the created TAR archive. close() : Closes the TAR archive writer. reader(data) : Returns an array containing information about each file in the TAR archive. Each element in the array represents a file and contains the following attributes: name : Name of the file. mode : Permission mode of the file. size : Size of the file. data : Content of the file.","title":"Functions"},{"location":"pages/stdlib-tar/#example-usage","text":"import \"tar\" import \"io\" // Create a new TAR archive writer := tar.writer() writer.create(\"hello.txt\", \"hello world\") writer.close() io.writefile(\"hello.tar\", writer.bytes()) // Reading TAR reader := tar.reader(io.readfile(\"hello.tar\"))","title":"Example Usage"},{"location":"pages/stdlib-times/","text":"times Module The times module provides functions and constants for working with time-related operations. Constants format_ansic : time format \"Mon Jan _2 15:04:05 2006\" format_unix_date : time format \"Mon Jan _2 15:04:05 MST 2006\" format_ruby_date : time format \"Mon Jan 02 15:04:05 -0700 2006\" format_rfc822 : time format \"02 Jan 06 15:04 MST\" format_rfc822z : time format \"02 Jan 06 15:04 -0700\" format_rfc850 : time format \"Monday, 02-Jan-06 15:04:05 MST\" format_rfc1123 : time format \"Mon, 02 Jan 2006 15:04:05 MST\" format_rfc1123z : time format \"Mon, 02 Jan 2006 15:04:05 -0700\" format_rfc3339 : time format \"2006-01-02T15:04:05Z07:00\" format_rfc3339_nano : time format \"2006-01-02T15:04:05.999999999Z07:00\" format_kitchen : time format \"3:04PM\" format_stamp : time format \"Jan _2 15:04:05\" format_stamp_milli : time format \"Jan _2 15:04:05.000\" format_stamp_micro : time format \"Jan _2 15:04:05.000000\" format_stamp_nano : time format \"Jan _2 15:04:05.000000000\" nanosecond microsecond millisecond second minute hour january february march april may june july august september october november december Functions sleep(duration int) : pauses the current goroutine for at least the duration d. A negative or zero duration causes Sleep to return immediately. parse_duration(s string) => int : parses a duration string. A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"\u00b5s\"), \"ms\", \"s\", \"m\", \"h\". since(t time) => int : returns the time elapsed since t. until(t time) => int : returns the duration until t. duration_hours(duration int) => float : returns the duration as a floating point number of hours. duration_minutes(duration int) => float : returns the duration as a floating point number of minutes. duration_nanoseconds(duration int) => int : returns the duration as an integer of nanoseconds. duration_seconds(duration int) => float : returns the duration as a floating point number of seconds. duration_string(duration int) => string : returns a string representation of duration. month_string(month int) => string : returns the English name of the month (\"January\", \"February\", ...). date(year int, month int, day int, hour int, min int, sec int, nsec int) => time : returns the Time corresponding to \"yyyy-mm-dd hh:mm:ss + nsec nanoseconds\". Current location is used. now() => time : returns the current local time. parse(format string, s string) => time : parses a formatted string and returns the time value it represents. The layout defines the format by showing how the reference time, defined to be \"Mon Jan 2 15:04:05 -0700 MST 2006\" would be interpreted if it were the value; it serves as an example of the input format. The same interpretation will then be made to the input string. unix(sec int, nsec int) => time : returns the local Time corresponding to the given Unix time, sec seconds and nsec nanoseconds since January 1, 1970 UTC. add(t time, duration int) => time : returns the time t+d. add_date(t time, years int, months int, days int) => time : returns the time corresponding to adding the given number of years, months, and days to t. For example, AddDate(-1, 2, 3) applied to January 1, 2011 returns March 4, 2010. sub(t time, u time) => int : returns the duration t-u. after(t time, u time) => bool : reports whether the time instant t is after u. before(t time, u time) => bool : reports whether the time instant t is before u. time_year(t time) => int : returns the year in which t occurs. time_month(t time) => int : returns the month of the year specified by t. time_day(t time) => int : returns the day of the month specified by t. time_weekday(t time) => int : returns the day of the week specified by t. time_hour(t time) => int : returns the hour within the day specified by t, in the range [0, 23]. time_minute(t time) => int : returns the minute offset within the hour specified by t, in the range [0, 59]. time_second(t time) => int : returns the second offset within the minute specified by t, in the range [0, 59]. time_nanosecond(t time) => int : returns the nanosecond offset within the second specified by t, in the range [0, 999999999]. time_unix(t time) => int : returns t as a Unix time, the number of seconds elapsed since January 1, 1970 UTC. The result does not depend on the location associated with t. time_unix_nano(t time) => int : returns t as a Unix time, the number of nanoseconds elapsed since January 1, 1970 UTC. The result is null if the Unix time in nanoseconds cannot be represented by an int64 (a date before the year 1678 or after 2262). Note that this means the result of calling UnixNano on the zero Time is null. The result does not depend on the location associated with t. time_format(t time, format) => string : returns a textual representation of he time value formatted according to layout, which defines the format by showing how the reference time, defined to be \"Mon Jan 2 15:04:05 -0700 MST 2006\" would be displayed if it were the value; it serves as an example of the desired output. The same display rules will then be applied to the time value. time_location(t time) => string : returns the time zone name associated with t. time_string(t time) => string : returns the time formatted using the format string \"2006-01-02 15:04:05.999999999 -0700 MST\". is_zero(t time) => bool : reports whether t represents the zero time instant, January 1, year 1, 00:00:00 UTC. to_local(t time) => time : returns t with the location set to local time. to_utc(t time) => time : returns t with the location set to UTC.","title":"times Module"},{"location":"pages/stdlib-times/#times-module","text":"The times module provides functions and constants for working with time-related operations.","title":"times Module"},{"location":"pages/stdlib-times/#constants","text":"format_ansic : time format \"Mon Jan _2 15:04:05 2006\" format_unix_date : time format \"Mon Jan _2 15:04:05 MST 2006\" format_ruby_date : time format \"Mon Jan 02 15:04:05 -0700 2006\" format_rfc822 : time format \"02 Jan 06 15:04 MST\" format_rfc822z : time format \"02 Jan 06 15:04 -0700\" format_rfc850 : time format \"Monday, 02-Jan-06 15:04:05 MST\" format_rfc1123 : time format \"Mon, 02 Jan 2006 15:04:05 MST\" format_rfc1123z : time format \"Mon, 02 Jan 2006 15:04:05 -0700\" format_rfc3339 : time format \"2006-01-02T15:04:05Z07:00\" format_rfc3339_nano : time format \"2006-01-02T15:04:05.999999999Z07:00\" format_kitchen : time format \"3:04PM\" format_stamp : time format \"Jan _2 15:04:05\" format_stamp_milli : time format \"Jan _2 15:04:05.000\" format_stamp_micro : time format \"Jan _2 15:04:05.000000\" format_stamp_nano : time format \"Jan _2 15:04:05.000000000\" nanosecond microsecond millisecond second minute hour january february march april may june july august september october november december","title":"Constants"},{"location":"pages/stdlib-times/#functions","text":"sleep(duration int) : pauses the current goroutine for at least the duration d. A negative or zero duration causes Sleep to return immediately. parse_duration(s string) => int : parses a duration string. A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\", \"-1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"\u00b5s\"), \"ms\", \"s\", \"m\", \"h\". since(t time) => int : returns the time elapsed since t. until(t time) => int : returns the duration until t. duration_hours(duration int) => float : returns the duration as a floating point number of hours. duration_minutes(duration int) => float : returns the duration as a floating point number of minutes. duration_nanoseconds(duration int) => int : returns the duration as an integer of nanoseconds. duration_seconds(duration int) => float : returns the duration as a floating point number of seconds. duration_string(duration int) => string : returns a string representation of duration. month_string(month int) => string : returns the English name of the month (\"January\", \"February\", ...). date(year int, month int, day int, hour int, min int, sec int, nsec int) => time : returns the Time corresponding to \"yyyy-mm-dd hh:mm:ss + nsec nanoseconds\". Current location is used. now() => time : returns the current local time. parse(format string, s string) => time : parses a formatted string and returns the time value it represents. The layout defines the format by showing how the reference time, defined to be \"Mon Jan 2 15:04:05 -0700 MST 2006\" would be interpreted if it were the value; it serves as an example of the input format. The same interpretation will then be made to the input string. unix(sec int, nsec int) => time : returns the local Time corresponding to the given Unix time, sec seconds and nsec nanoseconds since January 1, 1970 UTC. add(t time, duration int) => time : returns the time t+d. add_date(t time, years int, months int, days int) => time : returns the time corresponding to adding the given number of years, months, and days to t. For example, AddDate(-1, 2, 3) applied to January 1, 2011 returns March 4, 2010. sub(t time, u time) => int : returns the duration t-u. after(t time, u time) => bool : reports whether the time instant t is after u. before(t time, u time) => bool : reports whether the time instant t is before u. time_year(t time) => int : returns the year in which t occurs. time_month(t time) => int : returns the month of the year specified by t. time_day(t time) => int : returns the day of the month specified by t. time_weekday(t time) => int : returns the day of the week specified by t. time_hour(t time) => int : returns the hour within the day specified by t, in the range [0, 23]. time_minute(t time) => int : returns the minute offset within the hour specified by t, in the range [0, 59]. time_second(t time) => int : returns the second offset within the minute specified by t, in the range [0, 59]. time_nanosecond(t time) => int : returns the nanosecond offset within the second specified by t, in the range [0, 999999999]. time_unix(t time) => int : returns t as a Unix time, the number of seconds elapsed since January 1, 1970 UTC. The result does not depend on the location associated with t. time_unix_nano(t time) => int : returns t as a Unix time, the number of nanoseconds elapsed since January 1, 1970 UTC. The result is null if the Unix time in nanoseconds cannot be represented by an int64 (a date before the year 1678 or after 2262). Note that this means the result of calling UnixNano on the zero Time is null. The result does not depend on the location associated with t. time_format(t time, format) => string : returns a textual representation of he time value formatted according to layout, which defines the format by showing how the reference time, defined to be \"Mon Jan 2 15:04:05 -0700 MST 2006\" would be displayed if it were the value; it serves as an example of the desired output. The same display rules will then be applied to the time value. time_location(t time) => string : returns the time zone name associated with t. time_string(t time) => string : returns the time formatted using the format string \"2006-01-02 15:04:05.999999999 -0700 MST\". is_zero(t time) => bool : reports whether t represents the zero time instant, January 1, year 1, 00:00:00 UTC. to_local(t time) => time : returns t with the location set to local time. to_utc(t time) => time : returns t with the location set to UTC.","title":"Functions"},{"location":"pages/stdlib-websocket/","text":"WebSocket Module Documentation The websocket module provides functionalities for establishing and managing WebSocket connections using the gorilla/websocket library. Functions dial(url) Establishes a WebSocket connection to the specified URL. url : The URL to connect to. Returns a WebSocket Connection Object with methods for interaction. WebSocket Connection Object Methods read_message() Reads a message from the WebSocket connection. Returns an array containing the message type and message data. write_message(type, message) Writes a message to the WebSocket connection. type : The type of the message (e.g., text, binary). message : The message data to be sent. close() Closes the WebSocket connection. local_addr() Returns the local address of the WebSocket connection. remote_addr() Returns the remote address of the WebSocket connection. set_readdeadline(t) Sets the read deadline for the WebSocket connection. t : The read deadline time. set_writedeadline(t) Sets the write deadline for the WebSocket connection. t : The write deadline time. Example Usage import \"websocket\" // Dial a WebSocket connection var conn = websocket.dial(\"ws://example.com/socket\") //Read message from server go(fn(){ for { read := conn.read_message() println(read) } }) //Write message conn.write_message(1, \"hello\")","title":"Stdlib websocket"},{"location":"pages/stdlib-websocket/#websocket-module-documentation","text":"The websocket module provides functionalities for establishing and managing WebSocket connections using the gorilla/websocket library.","title":"WebSocket Module Documentation"},{"location":"pages/stdlib-websocket/#functions","text":"","title":"Functions"},{"location":"pages/stdlib-websocket/#dialurl","text":"Establishes a WebSocket connection to the specified URL. url : The URL to connect to. Returns a WebSocket Connection Object with methods for interaction.","title":"dial(url)"},{"location":"pages/stdlib-websocket/#websocket-connection-object-methods","text":"","title":"WebSocket Connection Object Methods"},{"location":"pages/stdlib-websocket/#read_message","text":"Reads a message from the WebSocket connection. Returns an array containing the message type and message data.","title":"read_message()"},{"location":"pages/stdlib-websocket/#write_messagetype-message","text":"Writes a message to the WebSocket connection. type : The type of the message (e.g., text, binary). message : The message data to be sent.","title":"write_message(type, message)"},{"location":"pages/stdlib-websocket/#close","text":"Closes the WebSocket connection.","title":"close()"},{"location":"pages/stdlib-websocket/#local_addr","text":"Returns the local address of the WebSocket connection.","title":"local_addr()"},{"location":"pages/stdlib-websocket/#remote_addr","text":"Returns the remote address of the WebSocket connection.","title":"remote_addr()"},{"location":"pages/stdlib-websocket/#set_readdeadlinet","text":"Sets the read deadline for the WebSocket connection. t : The read deadline time.","title":"set_readdeadline(t)"},{"location":"pages/stdlib-websocket/#set_writedeadlinet","text":"Sets the write deadline for the WebSocket connection. t : The write deadline time.","title":"set_writedeadline(t)"},{"location":"pages/stdlib-websocket/#example-usage","text":"import \"websocket\" // Dial a WebSocket connection var conn = websocket.dial(\"ws://example.com/socket\") //Read message from server go(fn(){ for { read := conn.read_message() println(read) } }) //Write message conn.write_message(1, \"hello\")","title":"Example Usage"},{"location":"pages/stdlib-zip/","text":"Zip Module Documentation The zip module provides functions for creating and reading ZIP archives. Functions writer() : Returns a writer object for creating a new ZIP archive. The writer object provides methods for adding files, setting comment, closing, and flushing the ZIP archive. create(filename, content) : Creates a new file entry in the ZIP archive with the specified filename and content. bytes() : Returns the byte representation of the created ZIP archive. close() : Closes the ZIP archive writer. flush() : Flushes any buffered data to the underlying writer. set_comment(comment) : Sets the comment for the ZIP archive. set_offset(offset) : Sets the offset for the next file entry in the ZIP archive. reader(data) : Returns a reader object for reading a ZIP archive from the provided byte slice. files : Returns an array containing information about each file in the ZIP archive. name : Name of the file. comment : Comment associated with the file. non_utf8 : Indicates whether the file name is not encoded in UTF-8. creator_version : Version of the software that created the ZIP archive. reader_version : Version needed to read the ZIP archive. method : Compression method used for the file. modified : Last modification time of the file. modified_time : Modified time in seconds since January 1, 1970 UTC. modified_date : Modified date in MS-DOS date format. crc32 : CRC-32 checksum of the file contents. compressed_size : Size of the compressed file data. uncompressed_size : Size of the uncompressed file data. extra : Extra data associated with the file. read() : Function to read the content of the file. comment : Comment associated with the ZIP archive. Example Usage import \"zip\" import \"io\" // Create a new ZIP archive writer := zip.writer() writer.create(\"hello.txt\", \"hello world\") writer.set_comment(\"this is a comment!\") writer.close() io.writefile(\"hello.zip\", writer.bytes()) // Reading ZIP reader := zip.reader(io.readfile(\"hello.zip\")) for file in reader.files { println(file.read()) }","title":"Stdlib zip"},{"location":"pages/stdlib-zip/#zip-module-documentation","text":"The zip module provides functions for creating and reading ZIP archives.","title":"Zip Module Documentation"},{"location":"pages/stdlib-zip/#functions","text":"writer() : Returns a writer object for creating a new ZIP archive. The writer object provides methods for adding files, setting comment, closing, and flushing the ZIP archive. create(filename, content) : Creates a new file entry in the ZIP archive with the specified filename and content. bytes() : Returns the byte representation of the created ZIP archive. close() : Closes the ZIP archive writer. flush() : Flushes any buffered data to the underlying writer. set_comment(comment) : Sets the comment for the ZIP archive. set_offset(offset) : Sets the offset for the next file entry in the ZIP archive. reader(data) : Returns a reader object for reading a ZIP archive from the provided byte slice. files : Returns an array containing information about each file in the ZIP archive. name : Name of the file. comment : Comment associated with the file. non_utf8 : Indicates whether the file name is not encoded in UTF-8. creator_version : Version of the software that created the ZIP archive. reader_version : Version needed to read the ZIP archive. method : Compression method used for the file. modified : Last modification time of the file. modified_time : Modified time in seconds since January 1, 1970 UTC. modified_date : Modified date in MS-DOS date format. crc32 : CRC-32 checksum of the file contents. compressed_size : Size of the compressed file data. uncompressed_size : Size of the uncompressed file data. extra : Extra data associated with the file. read() : Function to read the content of the file. comment : Comment associated with the ZIP archive.","title":"Functions"},{"location":"pages/stdlib-zip/#example-usage","text":"import \"zip\" import \"io\" // Create a new ZIP archive writer := zip.writer() writer.create(\"hello.txt\", \"hello world\") writer.set_comment(\"this is a comment!\") writer.close() io.writefile(\"hello.zip\", writer.bytes()) // Reading ZIP reader := zip.reader(io.readfile(\"hello.zip\")) for file in reader.files { println(file.read()) }","title":"Example Usage"},{"location":"pages/stdlib/","text":"Standard Library math : Mathematical constants and functions. os : Platform-independent interface to operating system functionality. strings : Regular expressions, string conversion, and manipulation. times : Time-related functions. rand : Random functions. fmt : Formatting functions. json : JSON functions. base64 : Base64 encoding and decoding functions. hex : Hex encoding and decoding functions. colors : Functions for printing colored text to the terminal. gzip : Functions for compressing and decompressing data using gzip. zip : Functions for working with ZIP archives. tar : Functions for creating and reading TAR archives. bufio : Buffered I/O functions. crypto : Cryptographic functions. path : Functions for manipulating file paths. image : Functions for manipulating images. canvas : Functions for drawing graphics on a canvas. dll : Functions for interacting with dynamic link libraries. io : Input and output functions. audio : Audio processing functions. net : Networking functions. http : Functions for HTTP client and server interactions. websocket : Functions for working with WebSockets.","title":"Standard Library"},{"location":"pages/stdlib/#standard-library","text":"math : Mathematical constants and functions. os : Platform-independent interface to operating system functionality. strings : Regular expressions, string conversion, and manipulation. times : Time-related functions. rand : Random functions. fmt : Formatting functions. json : JSON functions. base64 : Base64 encoding and decoding functions. hex : Hex encoding and decoding functions. colors : Functions for printing colored text to the terminal. gzip : Functions for compressing and decompressing data using gzip. zip : Functions for working with ZIP archives. tar : Functions for creating and reading TAR archives. bufio : Buffered I/O functions. crypto : Cryptographic functions. path : Functions for manipulating file paths. image : Functions for manipulating images. canvas : Functions for drawing graphics on a canvas. dll : Functions for interacting with dynamic link libraries. io : Input and output functions. audio : Audio processing functions. net : Networking functions. http : Functions for HTTP client and server interactions. websocket : Functions for working with WebSockets.","title":"Standard Library"}]}